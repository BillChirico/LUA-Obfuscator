{
	"numFailedTestSuites": 0,
	"numFailedTests": 0,
	"numPassedTestSuites": 9,
	"numPassedTests": 289,
	"numPendingTestSuites": 0,
	"numPendingTests": 0,
	"numRuntimeErrorTestSuites": 0,
	"numTodoTests": 0,
	"numTotalTestSuites": 9,
	"numTotalTests": 289,
	"openHandles": [],
	"snapshot": {
		"added": 0,
		"didUpdate": false,
		"failure": false,
		"filesAdded": 0,
		"filesRemoved": 0,
		"filesRemovedList": [],
		"filesUnmatched": 0,
		"filesUpdated": 0,
		"matched": 0,
		"total": 0,
		"unchecked": 0,
		"uncheckedKeysByFile": [],
		"unmatched": 0,
		"updated": 0
	},
	"startTime": 1760415252043,
	"success": false,
	"testResults": [
		{
			"assertionResults": [
				{
					"ancestorTitles": ["parseLua", "Happy Path - Valid Lua Code"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Happy Path - Valid Lua Code should parse simple variable declaration",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should parse simple variable declaration"
				},
				{
					"ancestorTitles": ["parseLua", "Happy Path - Valid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Happy Path - Valid Lua Code should parse function declaration",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should parse function declaration"
				},
				{
					"ancestorTitles": ["parseLua", "Happy Path - Valid Lua Code"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Happy Path - Valid Lua Code should parse string literals",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should parse string literals"
				},
				{
					"ancestorTitles": ["parseLua", "Happy Path - Valid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Happy Path - Valid Lua Code should parse complex table constructor",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should parse complex table constructor"
				},
				{
					"ancestorTitles": ["parseLua", "Happy Path - Valid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Happy Path - Valid Lua Code should parse if statements",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should parse if statements"
				},
				{
					"ancestorTitles": ["parseLua", "Happy Path - Valid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Happy Path - Valid Lua Code should parse for loops",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should parse for loops"
				},
				{
					"ancestorTitles": ["parseLua", "Happy Path - Valid Lua Code"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Happy Path - Valid Lua Code should parse complete programs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should parse complete programs"
				},
				{
					"ancestorTitles": ["parseLua", "Happy Path - Valid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Happy Path - Valid Lua Code should include locations and ranges in AST",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should include locations and ranges in AST"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should fail on incomplete statement",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should fail on incomplete statement"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should fail on unclosed function",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should fail on unclosed function"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should fail on unclosed string",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should fail on unclosed string"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should fail on invalid keyword usage",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should fail on invalid keyword usage"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should fail on missing end keyword",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should fail on missing end keyword"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should fail on extra end keyword",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should fail on extra end keyword"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should return error message on parse failure",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should return error message on parse failure"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should extract line and column information from parse errors",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should extract line and column information from parse errors"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should include error details with line information",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should include error details with line information"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should provide error details for unclosed string",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should provide error details for unclosed string"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should extract line and column from error with [line:column] format",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should extract line and column from error with [line:column] format"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should extract line from error with 'line X' format",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should extract line from error with 'line X' format"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should handle error without line/column information",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle error without line/column information"
				},
				{
					"ancestorTitles": ["parseLua", "Error Conditions - Invalid Lua Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Error Conditions - Invalid Lua Code should clean up error message by removing location prefix",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should clean up error message by removing location prefix"
				},
				{
					"ancestorTitles": ["parseLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Edge Cases should handle empty string",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle empty string"
				},
				{
					"ancestorTitles": ["parseLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Edge Cases should handle whitespace only",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle whitespace only"
				},
				{
					"ancestorTitles": ["parseLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Edge Cases should handle comments only",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle comments only"
				},
				{
					"ancestorTitles": ["parseLua", "Edge Cases"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Edge Cases should handle very long identifiers",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle very long identifiers"
				},
				{
					"ancestorTitles": ["parseLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Edge Cases should handle deeply nested structures",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle deeply nested structures"
				},
				{
					"ancestorTitles": ["parseLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Edge Cases should handle mixed whitespace",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle mixed whitespace"
				},
				{
					"ancestorTitles": ["parseLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Edge Cases should handle unicode characters in strings",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle unicode characters in strings"
				},
				{
					"ancestorTitles": ["parseLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "parseLua Edge Cases should handle strings with escape sequences",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle strings with escape sequences"
				},
				{
					"ancestorTitles": ["validateLua", "Happy Path - Valid Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "validateLua Happy Path - Valid Code should return true for valid Lua code",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return true for valid Lua code"
				},
				{
					"ancestorTitles": ["validateLua", "Happy Path - Valid Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "validateLua Happy Path - Valid Code should return true for empty code",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return true for empty code"
				},
				{
					"ancestorTitles": ["validateLua", "Happy Path - Valid Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "validateLua Happy Path - Valid Code should return true for whitespace only",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return true for whitespace only"
				},
				{
					"ancestorTitles": ["validateLua", "Error Conditions - Invalid Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "validateLua Error Conditions - Invalid Code should return false for invalid Lua code",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return false for invalid Lua code"
				},
				{
					"ancestorTitles": ["validateLua", "Error Conditions - Invalid Code"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "validateLua Error Conditions - Invalid Code should return false for syntax errors",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should return false for syntax errors"
				}
			],
			"endTime": 1760415252428,
			"message": "",
			"name": "/Users/billchirico/Developer/LUA-Obfuscator/web/__tests__/unit/lib/parser.test.ts",
			"startTime": 1760415252296,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["LuaObfuscator", "Happy Path - Full Obfuscation"],
					"duration": 2,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Happy Path - Full Obfuscation should successfully obfuscate simple variable declaration",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should successfully obfuscate simple variable declaration"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Happy Path - Full Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Happy Path - Full Obfuscation should successfully obfuscate function declaration",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should successfully obfuscate function declaration"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Happy Path - Full Obfuscation"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Happy Path - Full Obfuscation should successfully obfuscate complete programs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should successfully obfuscate complete programs"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Happy Path - Full Obfuscation"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Happy Path - Full Obfuscation should return result with all expected properties",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return result with all expected properties"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 1: Name Mangling"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 1: Name Mangling should mangle local variable names",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should mangle local variable names"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 1: Name Mangling"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 1: Name Mangling should mangle local function names",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should mangle local function names"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 1: Name Mangling"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 1: Name Mangling should mangle function parameters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should mangle function parameters"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 1: Name Mangling"],
					"duration": 2,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 1: Name Mangling should preserve global function names",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 50,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve global function names"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 1: Name Mangling"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 1: Name Mangling should not mangle print function",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should not mangle print function"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 1: Name Mangling"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 1: Name Mangling should not mangle require function",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should not mangle require function"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 1: Name Mangling"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 1: Name Mangling should not mangle math library",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should not mangle math library"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 1: Name Mangling"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 1: Name Mangling should consistently mangle same name across uses",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should consistently mangle same name across uses"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 1: Name Mangling"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 1: Name Mangling should generate unique names for different variables",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate unique names for different variables"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 1: Name Mangling"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 1: Name Mangling should mangle nested function variables independently",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should mangle nested function variables independently"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 2: String Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 2: String Encoding should encode string literals",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should encode string literals"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 2: String Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 2: String Encoding should encode strings with special characters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should encode strings with special characters"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 2: String Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 2: String Encoding should encode unicode strings",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should encode unicode strings"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 2: String Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 2: String Encoding should encode empty strings",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should encode empty strings"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 2: String Encoding"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 2: String Encoding should encode multiple strings independently",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should encode multiple strings independently"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 3: Minification"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 3: Minification should remove single-line comments",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should remove single-line comments"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 3: Minification"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 3: Minification should remove inline comments",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should remove inline comments"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 3: Minification"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 3: Minification should remove multiple single-line comments",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should remove multiple single-line comments"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 3: Minification"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 3: Minification should remove multi-line comments",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should remove multi-line comments"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 3: Minification"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 3: Minification should reduce excessive whitespace",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should reduce excessive whitespace"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 3: Minification"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 3: Minification should preserve necessary whitespace around keywords",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve necessary whitespace around keywords"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Technique 3: Minification"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Technique 3: Minification should not remove content inside strings",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should not remove content inside strings"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Combined Techniques"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Combined Techniques should apply all techniques when all options enabled",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should apply all techniques when all options enabled"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Combined Techniques"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Combined Techniques should apply selective techniques",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should apply selective techniques"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Combined Techniques"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Combined Techniques should handle no options (all defaults)",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle no options (all defaults)"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Error Conditions"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Error Conditions should fail gracefully on invalid Lua syntax",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should fail gracefully on invalid Lua syntax"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Error Conditions"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Error Conditions should return error message on parse failure",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return error message on parse failure"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Error Conditions"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Error Conditions should handle unclosed function gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle unclosed function gracefully"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Error Conditions"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Error Conditions should handle unclosed string gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle unclosed string gracefully"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Edge Cases should handle empty code",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle empty code"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Edge Cases should handle whitespace only",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle whitespace only"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Edge Cases"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Edge Cases should handle very long code",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle very long code"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Edge Cases"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Edge Cases should handle deeply nested structures",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle deeply nested structures"
				},
				{
					"ancestorTitles": ["LuaObfuscator", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Edge Cases should reset state between obfuscations",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should reset state between obfuscations"
				},
				{
					"ancestorTitles": ["obfuscateLua convenience function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "obfuscateLua convenience function should successfully obfuscate code",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should successfully obfuscate code"
				},
				{
					"ancestorTitles": ["obfuscateLua convenience function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "obfuscateLua convenience function should accept custom options",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should accept custom options"
				},
				{
					"ancestorTitles": ["obfuscateLua convenience function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "obfuscateLua convenience function should handle errors",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors"
				},
				{
					"ancestorTitles": ["obfuscateLua convenience function"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "obfuscateLua convenience function should work with default options",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should work with default options"
				}
			],
			"endTime": 1760415252485,
			"message": "",
			"name": "/Users/billchirico/Developer/LUA-Obfuscator/web/__tests__/unit/lib/obfuscator.test.ts",
			"startTime": 1760415252436,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should send event successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should send event successfully"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should include measurement ID and API secret in URL",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should include measurement ID and API secret in URL"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should include client ID in payload",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should include client ID in payload"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should include events in payload",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should include events in payload"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should add engagement_time_msec to events",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should add engagement_time_msec to events"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should preserve custom engagement time",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve custom engagement time"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should include optional user ID",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should include optional user ID"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should include timestamp",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should include timestamp"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 7,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should handle missing measurement ID",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle missing measurement ID"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should handle missing API secret",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle missing API secret"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should handle HTTP error responses",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle HTTP error responses"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 3,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should handle network errors",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle network errors"
				},
				{
					"ancestorTitles": ["sendGA4Event"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "sendGA4Event should log errors to console",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should log errors to console"
				},
				{
					"ancestorTitles": ["generateClientId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateClientId should generate a valid UUID",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate a valid UUID"
				},
				{
					"ancestorTitles": ["generateClientId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateClientId should generate unique IDs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate unique IDs"
				},
				{
					"ancestorTitles": ["generateClientId"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateClientId should generate 100 unique IDs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate 100 unique IDs"
				},
				{
					"ancestorTitles": ["trackObfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackObfuscation should track obfuscation event",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should track obfuscation event"
				},
				{
					"ancestorTitles": ["trackObfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackObfuscation should include correct event parameters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should include correct event parameters"
				},
				{
					"ancestorTitles": ["trackObfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackObfuscation should handle optional user ID",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle optional user ID"
				},
				{
					"ancestorTitles": ["trackDownload"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackDownload should track download event",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should track download event"
				},
				{
					"ancestorTitles": ["trackDownload"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackDownload should include correct event parameters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should include correct event parameters"
				},
				{
					"ancestorTitles": ["trackCopy"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackCopy should track copy event",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should track copy event"
				},
				{
					"ancestorTitles": ["trackCopy"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackCopy should include correct event parameters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should include correct event parameters"
				}
			],
			"endTime": 1760415252540,
			"message": "",
			"name": "/Users/billchirico/Developer/LUA-Obfuscator/web/__tests__/unit/lib/analytics-server.test.ts",
			"startTime": 1760415252496,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["obfuscateLua convenience function"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "obfuscateLua convenience function should obfuscate code with default options",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should obfuscate code with default options"
				},
				{
					"ancestorTitles": ["obfuscateLua convenience function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "obfuscateLua convenience function should accept custom options",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should accept custom options"
				},
				{
					"ancestorTitles": ["obfuscateLua convenience function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "obfuscateLua convenience function should handle errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors gracefully"
				},
				{
					"ancestorTitles": ["Protection Level Mapping"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Protection Level Mapping protection level 0 should disable all obfuscation",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "protection level 0 should disable all obfuscation"
				},
				{
					"ancestorTitles": ["Protection Level Mapping"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Protection Level Mapping protection level 10 should enable minify only",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "protection level 10 should enable minify only"
				},
				{
					"ancestorTitles": ["Protection Level Mapping"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Protection Level Mapping protection level 20 should enable minify and name mangling",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "protection level 20 should enable minify and name mangling"
				},
				{
					"ancestorTitles": ["Protection Level Mapping"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Protection Level Mapping protection level 40 should enable minify, mangle, and encode strings",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "protection level 40 should enable minify, mangle, and encode strings"
				},
				{
					"ancestorTitles": ["Protection Level Mapping"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Protection Level Mapping protection level 60 should add number encoding",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "protection level 60 should add number encoding"
				},
				{
					"ancestorTitles": ["Protection Level Mapping"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Protection Level Mapping protection level 80+ should enable all techniques",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 22,
					"retryReasons": [],
					"status": "passed",
					"title": "protection level 80+ should enable all techniques"
				},
				{
					"ancestorTitles": ["Protection Level Mapping"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Protection Level Mapping protection level 100 should apply maximum obfuscation",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "protection level 100 should apply maximum obfuscation"
				},
				{
					"ancestorTitles": ["Protection Level Mapping"],
					"duration": 2,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Protection Level Mapping should handle protection levels 0-100 in increments of 10",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 33,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle protection levels 0-100 in increments of 10"
				},
				{
					"ancestorTitles": ["LuaObfuscator Class"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Class should create instance successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should create instance successfully"
				},
				{
					"ancestorTitles": ["LuaObfuscator Class"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Class should reset state between obfuscations",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should reset state between obfuscations"
				},
				{
					"ancestorTitles": ["LuaObfuscator Class"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Class should handle multiple consecutive obfuscations",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 6,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle multiple consecutive obfuscations"
				},
				{
					"ancestorTitles": ["LuaObfuscator Class"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "LuaObfuscator Class should maintain consistency for same input",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should maintain consistency for same input"
				},
				{
					"ancestorTitles": ["ObfuscationOptions Validation"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "ObfuscationOptions Validation should work with all options enabled",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should work with all options enabled"
				},
				{
					"ancestorTitles": ["ObfuscationOptions Validation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "ObfuscationOptions Validation should work with all options disabled",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should work with all options disabled"
				},
				{
					"ancestorTitles": ["ObfuscationOptions Validation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "ObfuscationOptions Validation should handle partial option sets",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle partial option sets"
				},
				{
					"ancestorTitles": ["ObfuscationOptions Validation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "ObfuscationOptions Validation should use default protection level if not specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default protection level if not specified"
				},
				{
					"ancestorTitles": ["Error Handling in obfuscator-simple"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Error Handling in obfuscator-simple should return error for invalid Lua syntax",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return error for invalid Lua syntax"
				},
				{
					"ancestorTitles": ["Error Handling in obfuscator-simple"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Error Handling in obfuscator-simple should include error details",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should include error details"
				},
				{
					"ancestorTitles": ["Error Handling in obfuscator-simple"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Error Handling in obfuscator-simple should handle empty input",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle empty input"
				},
				{
					"ancestorTitles": ["Error Handling in obfuscator-simple"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Error Handling in obfuscator-simple should handle whitespace-only input",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle whitespace-only input"
				},
				{
					"ancestorTitles": ["Error Handling in obfuscator-simple"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Error Handling in obfuscator-simple should catch and return obfuscation errors",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should catch and return obfuscation errors"
				},
				{
					"ancestorTitles": ["Advanced Option Combinations"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Advanced Option Combinations should apply options in correct order",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should apply options in correct order"
				},
				{
					"ancestorTitles": ["Advanced Option Combinations"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Advanced Option Combinations should preserve semantics with all options",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve semantics with all options"
				}
			],
			"endTime": 1760415252591,
			"message": "",
			"name": "/Users/billchirico/Developer/LUA-Obfuscator/web/__tests__/unit/lib/obfuscator-simple.test.ts",
			"startTime": 1760415252554,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["generateLua", "Happy Path - Basic Node Types"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Happy Path - Basic Node Types should generate code from empty AST",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate code from empty AST"
				},
				{
					"ancestorTitles": ["generateLua", "Happy Path - Basic Node Types"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Happy Path - Basic Node Types should generate variable declaration",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate variable declaration"
				},
				{
					"ancestorTitles": ["generateLua", "Happy Path - Basic Node Types"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Happy Path - Basic Node Types should generate function declaration",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate function declaration"
				},
				{
					"ancestorTitles": ["generateLua", "Happy Path - Basic Node Types"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Happy Path - Basic Node Types should generate local function",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate local function"
				},
				{
					"ancestorTitles": ["generateLua", "Happy Path - Basic Node Types"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Happy Path - Basic Node Types should generate return statement",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate return statement"
				},
				{
					"ancestorTitles": ["generateLua", "Happy Path - Basic Node Types"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Happy Path - Basic Node Types should generate multiple return values",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate multiple return values"
				},
				{
					"ancestorTitles": ["generateLua", "Happy Path - Basic Node Types"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Happy Path - Basic Node Types should generate empty return",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate empty return"
				},
				{
					"ancestorTitles": ["generateLua", "String Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua String Literals should generate simple string literal",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate simple string literal"
				},
				{
					"ancestorTitles": ["generateLua", "String Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua String Literals should handle double quotes",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle double quotes"
				},
				{
					"ancestorTitles": ["generateLua", "String Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua String Literals should handle single quotes",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle single quotes"
				},
				{
					"ancestorTitles": ["generateLua", "String Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua String Literals should escape special characters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should escape special characters"
				},
				{
					"ancestorTitles": ["generateLua", "String Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua String Literals should handle empty strings",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle empty strings"
				},
				{
					"ancestorTitles": ["generateLua", "String Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua String Literals should handle unicode strings",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle unicode strings"
				},
				{
					"ancestorTitles": ["generateLua", "Table Constructors"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Table Constructors should generate empty table",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate empty table"
				},
				{
					"ancestorTitles": ["generateLua", "Table Constructors"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Table Constructors should generate table with named fields",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate table with named fields"
				},
				{
					"ancestorTitles": ["generateLua", "Table Constructors"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Table Constructors should generate table with bracket keys",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate table with bracket keys"
				},
				{
					"ancestorTitles": ["generateLua", "Table Constructors"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Table Constructors should generate array-style table",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate array-style table"
				},
				{
					"ancestorTitles": ["generateLua", "Table Constructors"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Table Constructors should generate nested tables",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate nested tables"
				},
				{
					"ancestorTitles": ["generateLua", "Control Flow Statements"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Control Flow Statements should generate if statement",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate if statement"
				},
				{
					"ancestorTitles": ["generateLua", "Control Flow Statements"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Control Flow Statements should generate if-elseif-else statement",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate if-elseif-else statement"
				},
				{
					"ancestorTitles": ["generateLua", "Control Flow Statements"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Control Flow Statements should generate while loop",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate while loop"
				},
				{
					"ancestorTitles": ["generateLua", "Control Flow Statements"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Control Flow Statements should generate repeat-until loop",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate repeat-until loop"
				},
				{
					"ancestorTitles": ["generateLua", "Control Flow Statements"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Control Flow Statements should generate numeric for loop",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate numeric for loop"
				},
				{
					"ancestorTitles": ["generateLua", "Control Flow Statements"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Control Flow Statements should generate numeric for loop with step",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate numeric for loop with step"
				},
				{
					"ancestorTitles": ["generateLua", "Control Flow Statements"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Control Flow Statements should generate generic for loop",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate generic for loop"
				},
				{
					"ancestorTitles": ["generateLua", "Control Flow Statements"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Control Flow Statements should generate break statement",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate break statement"
				},
				{
					"ancestorTitles": ["generateLua", "Control Flow Statements"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Control Flow Statements should generate do block",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate do block"
				},
				{
					"ancestorTitles": ["generateLua", "Expressions"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Expressions should generate binary expressions",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate binary expressions"
				},
				{
					"ancestorTitles": ["generateLua", "Expressions"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Expressions should generate comparison expressions",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate comparison expressions"
				},
				{
					"ancestorTitles": ["generateLua", "Expressions"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Expressions should generate unary expressions",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate unary expressions"
				},
				{
					"ancestorTitles": ["generateLua", "Expressions"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Expressions should generate length operator",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate length operator"
				},
				{
					"ancestorTitles": ["generateLua", "Expressions"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Expressions should generate string concatenation",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate string concatenation"
				},
				{
					"ancestorTitles": ["generateLua", "Expressions"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Expressions should generate logical expressions",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate logical expressions"
				},
				{
					"ancestorTitles": ["generateLua", "Member and Index Access"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Member and Index Access should generate member access",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate member access"
				},
				{
					"ancestorTitles": ["generateLua", "Member and Index Access"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Member and Index Access should generate index access",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate index access"
				},
				{
					"ancestorTitles": ["generateLua", "Member and Index Access"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Member and Index Access should generate chained member access",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate chained member access"
				},
				{
					"ancestorTitles": ["generateLua", "Member and Index Access"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Member and Index Access should generate chained index access",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate chained index access"
				},
				{
					"ancestorTitles": ["generateLua", "Function Calls"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Function Calls should generate simple function call",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate simple function call"
				},
				{
					"ancestorTitles": ["generateLua", "Function Calls"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Function Calls should generate function call with arguments",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate function call with arguments"
				},
				{
					"ancestorTitles": ["generateLua", "Function Calls"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Function Calls should generate nested function calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate nested function calls"
				},
				{
					"ancestorTitles": ["generateLua", "Numeric and Boolean Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Numeric and Boolean Literals should generate numeric literal",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate numeric literal"
				},
				{
					"ancestorTitles": ["generateLua", "Numeric and Boolean Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Numeric and Boolean Literals should generate decimal literal",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate decimal literal"
				},
				{
					"ancestorTitles": ["generateLua", "Numeric and Boolean Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Numeric and Boolean Literals should generate boolean true",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate boolean true"
				},
				{
					"ancestorTitles": ["generateLua", "Numeric and Boolean Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Numeric and Boolean Literals should generate boolean false",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate boolean false"
				},
				{
					"ancestorTitles": ["generateLua", "Numeric and Boolean Literals"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Numeric and Boolean Literals should generate nil literal",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate nil literal"
				},
				{
					"ancestorTitles": ["generateLua", "Complex Programs"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Complex Programs should generate fibonacci function",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate fibonacci function"
				},
				{
					"ancestorTitles": ["generateLua", "Complex Programs"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Complex Programs should generate factorial function",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate factorial function"
				},
				{
					"ancestorTitles": ["generateLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Edge Cases should handle null node",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle null node"
				},
				{
					"ancestorTitles": ["generateLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Edge Cases should handle undefined node",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle undefined node"
				},
				{
					"ancestorTitles": ["generateLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Edge Cases should handle unknown node types gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle unknown node types gracefully"
				},
				{
					"ancestorTitles": ["generateLua", "Edge Cases"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Edge Cases should handle empty chunk",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle empty chunk"
				},
				{
					"ancestorTitles": ["generateLua", "Edge Cases"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Edge Cases should handle deeply nested structures",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle deeply nested structures"
				},
				{
					"ancestorTitles": ["generateLua", "Round-Trip Generation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Round-Trip Generation should generate code that can be parsed again",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate code that can be parsed again"
				},
				{
					"ancestorTitles": ["generateLua", "Round-Trip Generation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Round-Trip Generation should preserve semantics for functions",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve semantics for functions"
				},
				{
					"ancestorTitles": ["generateLua", "Round-Trip Generation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Round-Trip Generation should preserve semantics for complex programs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve semantics for complex programs"
				},
				{
					"ancestorTitles": ["generateLua", "Assignment Statements"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Assignment Statements should generate simple assignment",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate simple assignment"
				},
				{
					"ancestorTitles": ["generateLua", "Assignment Statements"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "generateLua Assignment Statements should generate multiple assignment",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate multiple assignment"
				}
			],
			"endTime": 1760415252642,
			"message": "",
			"name": "/Users/billchirico/Developer/LUA-Obfuscator/web/__tests__/unit/lib/generator.test.ts",
			"startTime": 1760415252597,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["getClientId"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "getClientId should generate and store new client ID if none exists",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate and store new client ID if none exists"
				},
				{
					"ancestorTitles": ["getClientId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "getClientId should return existing client ID from localStorage",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return existing client ID from localStorage"
				},
				{
					"ancestorTitles": ["getClientId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "getClientId should return same client ID on multiple calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should return same client ID on multiple calls"
				},
				{
					"ancestorTitles": ["getClientId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "getClientId should generate unique IDs for different users",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should generate unique IDs for different users"
				},
				{
					"ancestorTitles": ["getClientId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "getClientId should handle server-side rendering gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle server-side rendering gracefully"
				},
				{
					"ancestorTitles": ["trackEvent"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackEvent should successfully track event",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should successfully track event"
				},
				{
					"ancestorTitles": ["trackEvent"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackEvent should include client ID in request",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should include client ID in request"
				},
				{
					"ancestorTitles": ["trackEvent"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackEvent should include events array in request",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should include events array in request"
				},
				{
					"ancestorTitles": ["trackEvent"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackEvent should include optional user ID",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should include optional user ID"
				},
				{
					"ancestorTitles": ["trackEvent"],
					"duration": 4,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackEvent should handle network errors",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle network errors"
				},
				{
					"ancestorTitles": ["trackEvent"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackEvent should handle API error responses",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle API error responses"
				},
				{
					"ancestorTitles": ["trackEvent"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackEvent should log errors to console",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should log errors to console"
				},
				{
					"ancestorTitles": ["trackObfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackObfuscation should track obfuscation with correct event name",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should track obfuscation with correct event name"
				},
				{
					"ancestorTitles": ["trackObfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackObfuscation should include obfuscation parameters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should include obfuscation parameters"
				},
				{
					"ancestorTitles": ["trackObfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackObfuscation should handle all obfuscation types",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle all obfuscation types"
				},
				{
					"ancestorTitles": ["trackDownload"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackDownload should track download with correct event name",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should track download with correct event name"
				},
				{
					"ancestorTitles": ["trackDownload"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackDownload should include code size parameter",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should include code size parameter"
				},
				{
					"ancestorTitles": ["trackCopy"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackCopy should track copy with correct event name",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should track copy with correct event name"
				},
				{
					"ancestorTitles": ["trackCopy"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackCopy should include code size parameter",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should include code size parameter"
				},
				{
					"ancestorTitles": ["trackSettingsChange"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackSettingsChange should track settings change with correct event name",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should track settings change with correct event name"
				},
				{
					"ancestorTitles": ["trackSettingsChange"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackSettingsChange should handle boolean values",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle boolean values"
				},
				{
					"ancestorTitles": ["trackSettingsChange"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackSettingsChange should handle number values",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle number values"
				},
				{
					"ancestorTitles": ["trackSettingsChange"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackSettingsChange should handle string values",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle string values"
				},
				{
					"ancestorTitles": ["trackError"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackError should track error with correct event name",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should track error with correct event name"
				},
				{
					"ancestorTitles": ["trackError"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackError should include error type parameter",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should include error type parameter"
				},
				{
					"ancestorTitles": ["trackError"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "trackError should work without error message",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should work without error message"
				}
			],
			"endTime": 1760415252685,
			"message": "",
			"name": "/Users/billchirico/Developer/LUA-Obfuscator/web/__tests__/unit/lib/analytics-client.test.ts",
			"startTime": 1760415252647,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "End-to-End Happy Path"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration End-to-End Happy Path should complete full pipeline for simple code",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should complete full pipeline for simple code"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "End-to-End Happy Path"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration End-to-End Happy Path should complete full pipeline for functions",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should complete full pipeline for functions"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "End-to-End Happy Path"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration End-to-End Happy Path should complete full pipeline for complex programs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should complete full pipeline for complex programs"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "End-to-End Happy Path"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration End-to-End Happy Path should complete full pipeline for programs with tables",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should complete full pipeline for programs with tables"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "End-to-End Happy Path"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration End-to-End Happy Path should complete full pipeline for loops",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should complete full pipeline for loops"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Option Combinations"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Option Combinations should work with only name mangling",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should work with only name mangling"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Option Combinations"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Option Combinations should work with only string encoding",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should work with only string encoding"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Option Combinations"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Option Combinations should work with only minification",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should work with only minification"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Option Combinations"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Option Combinations should work with mangling + minification",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should work with mangling + minification"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Option Combinations"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Option Combinations should work with all options enabled",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should work with all options enabled"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Option Combinations"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Option Combinations should work with all options disabled",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should work with all options disabled"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Round-Trip Validation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Round-Trip Validation should produce valid Lua after obfuscation",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should produce valid Lua after obfuscation"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Round-Trip Validation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Round-Trip Validation should preserve parseability through multiple obfuscations",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve parseability through multiple obfuscations"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Round-Trip Validation"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Round-Trip Validation should preserve structure for complex programs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve structure for complex programs"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Global Preservation Across Pipeline"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Global Preservation Across Pipeline should preserve all Lua globals through full pipeline",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve all Lua globals through full pipeline"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Global Preservation Across Pipeline"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Global Preservation Across Pipeline should preserve math library",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve math library"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Global Preservation Across Pipeline"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Global Preservation Across Pipeline should preserve string library",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve string library"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Global Preservation Across Pipeline"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Global Preservation Across Pipeline should preserve table library",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve table library"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Semantic Preservation"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Semantic Preservation should preserve variable scoping",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve variable scoping"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Semantic Preservation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Semantic Preservation should preserve function closures",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve function closures"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Semantic Preservation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Semantic Preservation should preserve return values",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve return values"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Pipeline Error Handling"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Pipeline Error Handling should fail gracefully on invalid input",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should fail gracefully on invalid input"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Pipeline Error Handling"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Pipeline Error Handling should handle parse errors in pipeline",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle parse errors in pipeline"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Pipeline Error Handling"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Pipeline Error Handling should provide meaningful error messages",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should provide meaningful error messages"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Performance and Scale"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Performance and Scale should handle moderate-sized programs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle moderate-sized programs"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Performance and Scale"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Performance and Scale should handle nested structures",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle nested structures"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Performance and Scale"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Performance and Scale should handle complex table constructors",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle complex table constructors"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Idempotency"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Idempotency should produce same output for same input with same options",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should produce same output for same input with same options"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Comments Removal in Pipeline"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Comments Removal in Pipeline should remove comments when minification enabled",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should remove comments when minification enabled"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "Comments Removal in Pipeline"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration Comments Removal in Pipeline should preserve comments when minification disabled",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve comments when minification disabled"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "String Handling in Pipeline"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration String Handling in Pipeline should handle strings with special characters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle strings with special characters"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "String Handling in Pipeline"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration String Handling in Pipeline should handle unicode strings",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle unicode strings"
				},
				{
					"ancestorTitles": ["Obfuscation Pipeline Integration", "String Handling in Pipeline"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Obfuscation Pipeline Integration String Handling in Pipeline should handle empty strings",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle empty strings"
				}
			],
			"endTime": 1760415252726,
			"message": "",
			"name": "/Users/billchirico/Developer/LUA-Obfuscator/web/__tests__/integration/obfuscation-pipeline.test.ts",
			"startTime": 1760415252690,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should encode integer literals",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should encode integer literals"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should encode decimal literals",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should encode decimal literals"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should skip small numbers (0-3)",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should skip small numbers (0-3)"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should encode large numbers",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should encode large numbers"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should encode negative numbers",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should encode negative numbers"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should preserve number semantics",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve number semantics"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should handle numbers in expressions",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle numbers in expressions"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should handle numbers in function calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle numbers in function calls"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should handle numbers in table constructors",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle numbers in table constructors"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should not encode numbers in identifiers",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should not encode numbers in identifiers"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should respect protection level 0 (no encoding)",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should respect protection level 0 (no encoding)"
				},
				{
					"ancestorTitles": ["Number Encoding"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Number Encoding should respect protection level 50 (partial encoding)",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should respect protection level 50 (partial encoding)"
				},
				{
					"ancestorTitles": ["Control Flow Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Control Flow Obfuscation should add opaque predicates to if statements",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should add opaque predicates to if statements"
				},
				{
					"ancestorTitles": ["Control Flow Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Control Flow Obfuscation should preserve if statement logic",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve if statement logic"
				},
				{
					"ancestorTitles": ["Control Flow Obfuscation"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Control Flow Obfuscation should add opaque predicates to while loops",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should add opaque predicates to while loops"
				},
				{
					"ancestorTitles": ["Control Flow Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Control Flow Obfuscation should preserve while loop logic",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve while loop logic"
				},
				{
					"ancestorTitles": ["Control Flow Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Control Flow Obfuscation should add opaque predicates to repeat-until loops",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should add opaque predicates to repeat-until loops"
				},
				{
					"ancestorTitles": ["Control Flow Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Control Flow Obfuscation should preserve repeat-until logic",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve repeat-until logic"
				},
				{
					"ancestorTitles": ["Control Flow Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Control Flow Obfuscation should handle nested control structures",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle nested control structures"
				},
				{
					"ancestorTitles": ["Control Flow Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Control Flow Obfuscation should handle complex conditions",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle complex conditions"
				},
				{
					"ancestorTitles": ["Control Flow Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Control Flow Obfuscation should respect protection level 0 (no obfuscation)",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should respect protection level 0 (no obfuscation)"
				},
				{
					"ancestorTitles": ["Control Flow Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Control Flow Obfuscation should respect protection level 50 (partial obfuscation)",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should respect protection level 50 (partial obfuscation)"
				},
				{
					"ancestorTitles": ["Combined Advanced Techniques"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Combined Advanced Techniques should apply both number encoding and control flow",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should apply both number encoding and control flow"
				},
				{
					"ancestorTitles": ["Combined Advanced Techniques"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Combined Advanced Techniques should work with all obfuscation techniques enabled",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should work with all obfuscation techniques enabled"
				},
				{
					"ancestorTitles": ["Combined Advanced Techniques"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Combined Advanced Techniques should preserve program semantics with advanced obfuscation",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should preserve program semantics with advanced obfuscation"
				},
				{
					"ancestorTitles": ["Edge Cases for Advanced Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Edge Cases for Advanced Obfuscation should handle empty input",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle empty input"
				},
				{
					"ancestorTitles": ["Edge Cases for Advanced Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Edge Cases for Advanced Obfuscation should handle code without numbers",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle code without numbers"
				},
				{
					"ancestorTitles": ["Edge Cases for Advanced Obfuscation"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Edge Cases for Advanced Obfuscation should handle code without control flow",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle code without control flow"
				}
			],
			"endTime": 1760415252768,
			"message": "",
			"name": "/Users/billchirico/Developer/LUA-Obfuscator/web/__tests__/unit/lib/obfuscator-advanced.test.ts",
			"startTime": 1760415252736,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 3,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should merge single className",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should merge single className"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should merge multiple classNames",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should merge multiple classNames"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle conflicting Tailwind classes correctly",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle conflicting Tailwind classes correctly"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle conditional classNames with false values",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle conditional classNames with false values"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle conditional classNames with true values",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle conditional classNames with true values"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle undefined and null values",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle undefined and null values"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle empty string",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle empty string"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle array of classNames",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle array of classNames"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle object with boolean values",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle object with boolean values"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should merge conflicting padding classes",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should merge conflicting padding classes"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle complex className combinations",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle complex className combinations"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle no arguments",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle no arguments"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle spacing and trim correctly",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle spacing and trim correctly"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle responsive classes",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle responsive classes"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle dark mode classes",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle dark mode classes"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should deduplicate identical classes",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should deduplicate identical classes"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle arbitrary values",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle arbitrary values"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should merge conflicting width classes",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should merge conflicting width classes"
				},
				{
					"ancestorTitles": ["utils", "cn() - className utility function"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "utils cn() - className utility function should handle nested arrays and objects",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle nested arrays and objects"
				}
			],
			"endTime": 1760415252814,
			"message": "",
			"name": "/Users/billchirico/Developer/LUA-Obfuscator/web/__tests__/unit/lib/utils.test.ts",
			"startTime": 1760415252774,
			"status": "passed",
			"summary": ""
		}
	],
	"wasInterrupted": false,
	"coverageMap": {
		"/Users/billchirico/Developer/LUA-Obfuscator/web/lib/parser.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/lib/parser.ts",
			"statementMap": {
				"0": { "start": { "line": 23, "column": 16 }, "end": { "line": 23, "column": 25 } },
				"1": { "start": { "line": 83, "column": 16 }, "end": { "line": 83, "column": 28 } },
				"2": { "start": { "line": 1, "column": 26 }, "end": { "line": 1, "column": null } },
				"3": { "start": { "line": 24, "column": 1 }, "end": { "line": 74, "column": null } },
				"4": { "start": { "line": 25, "column": 14 }, "end": { "line": 29, "column": null } },
				"5": { "start": { "line": 30, "column": 2 }, "end": { "line": 30, "column": null } },
				"6": { "start": { "line": 34, "column": 21 }, "end": { "line": 34, "column": null } },
				"7": { "start": { "line": 39, "column": 2 }, "end": { "line": 41, "column": null } },
				"8": { "start": { "line": 40, "column": 3 }, "end": { "line": 40, "column": null } },
				"9": { "start": { "line": 42, "column": 2 }, "end": { "line": 44, "column": null } },
				"10": { "start": { "line": 43, "column": 3 }, "end": { "line": 43, "column": null } },
				"11": { "start": { "line": 47, "column": 2 }, "end": { "line": 55, "column": null } },
				"12": { "start": { "line": 48, "column": 17 }, "end": { "line": 48, "column": null } },
				"13": { "start": { "line": 49, "column": 3 }, "end": { "line": 54, "column": null } },
				"14": { "start": { "line": 50, "column": 4 }, "end": { "line": 50, "column": null } },
				"15": { "start": { "line": 51, "column": 4 }, "end": { "line": 51, "column": null } },
				"16": { "start": { "line": 53, "column": 4 }, "end": { "line": 53, "column": null } },
				"17": { "start": { "line": 58, "column": 2 }, "end": { "line": 63, "column": null } },
				"18": { "start": { "line": 59, "column": 21 }, "end": { "line": 59, "column": null } },
				"19": { "start": { "line": 60, "column": 3 }, "end": { "line": 62, "column": null } },
				"20": { "start": { "line": 61, "column": 4 }, "end": { "line": 61, "column": null } },
				"21": { "start": { "line": 65, "column": 2 }, "end": { "line": 73, "column": null } },
				"22": { "start": { "line": 84, "column": 16 }, "end": { "line": 84, "column": null } },
				"23": { "start": { "line": 85, "column": 1 }, "end": { "line": 85, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "parseLua",
					"decl": { "start": { "line": 23, "column": 16 }, "end": { "line": 23, "column": 25 } },
					"loc": { "start": { "line": 23, "column": 37 }, "end": { "line": 75, "column": null } }
				},
				"1": {
					"name": "validateLua",
					"decl": { "start": { "line": 83, "column": 16 }, "end": { "line": 83, "column": 28 } },
					"loc": { "start": { "line": 83, "column": 40 }, "end": { "line": 86, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 34, "column": 21 }, "end": { "line": 34, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 34, "column": 21 }, "end": { "line": 34, "column": 34 } },
						{ "start": { "line": 34, "column": 38 }, "end": { "line": 34, "column": null } }
					]
				},
				"1": {
					"loc": { "start": { "line": 39, "column": 2 }, "end": { "line": 41, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 39, "column": 2 }, "end": { "line": 41, "column": null } }]
				},
				"2": {
					"loc": { "start": { "line": 42, "column": 2 }, "end": { "line": 44, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 42, "column": 2 }, "end": { "line": 44, "column": null } }]
				},
				"3": {
					"loc": { "start": { "line": 47, "column": 2 }, "end": { "line": 55, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 47, "column": 2 }, "end": { "line": 55, "column": null } }]
				},
				"4": {
					"loc": { "start": { "line": 49, "column": 3 }, "end": { "line": 54, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 49, "column": 3 }, "end": { "line": 54, "column": null } }]
				},
				"5": {
					"loc": { "start": { "line": 58, "column": 2 }, "end": { "line": 63, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 58, "column": 2 }, "end": { "line": 63, "column": null } }]
				},
				"6": {
					"loc": { "start": { "line": 60, "column": 3 }, "end": { "line": 62, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 60, "column": 3 }, "end": { "line": 62, "column": null } }]
				}
			},
			"s": {
				"0": 310,
				"1": 10,
				"2": 6,
				"3": 320,
				"4": 320,
				"5": 290,
				"6": 30,
				"7": 30,
				"8": 30,
				"9": 30,
				"10": 30,
				"11": 30,
				"12": 0,
				"13": 0,
				"14": 0,
				"15": 0,
				"16": 0,
				"17": 30,
				"18": 0,
				"19": 0,
				"20": 0,
				"21": 30,
				"22": 10,
				"23": 10
			},
			"f": { "0": 320, "1": 10 },
			"b": { "0": [30, 0], "1": [30], "2": [30], "3": [0], "4": [0], "5": [0], "6": [0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/lib/obfuscator.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/lib/obfuscator.ts",
			"statementMap": {
				"0": { "start": { "line": 21, "column": 13 }, "end": { "line": 21, "column": null } },
				"1": { "start": { "line": 463, "column": 16 }, "end": { "line": 463, "column": null } },
				"2": { "start": { "line": 1, "column": 25 }, "end": { "line": 1, "column": null } },
				"3": { "start": { "line": 2, "column": 28 }, "end": { "line": 2, "column": null } },
				"4": { "start": { "line": 39, "column": 2 }, "end": { "line": 88, "column": null } },
				"5": { "start": { "line": 41, "column": 3 }, "end": { "line": 41, "column": null } },
				"6": { "start": { "line": 42, "column": 3 }, "end": { "line": 42, "column": null } },
				"7": { "start": { "line": 45, "column": 23 }, "end": { "line": 45, "column": null } },
				"8": { "start": { "line": 46, "column": 3 }, "end": { "line": 51, "column": null } },
				"9": { "start": { "line": 47, "column": 4 }, "end": { "line": 50, "column": null } },
				"10": { "start": { "line": 53, "column": 13 }, "end": { "line": 53, "column": 28 } },
				"11": { "start": { "line": 55, "column": 27 }, "end": { "line": 55, "column": null } },
				"12": { "start": { "line": 58, "column": 3 }, "end": { "line": 60, "column": null } },
				"13": { "start": { "line": 59, "column": 4 }, "end": { "line": 59, "column": null } },
				"14": { "start": { "line": 62, "column": 3 }, "end": { "line": 64, "column": null } },
				"15": { "start": { "line": 63, "column": 4 }, "end": { "line": 63, "column": null } },
				"16": { "start": { "line": 66, "column": 3 }, "end": { "line": 68, "column": null } },
				"17": { "start": { "line": 67, "column": 4 }, "end": { "line": 67, "column": null } },
				"18": { "start": { "line": 70, "column": 3 }, "end": { "line": 72, "column": null } },
				"19": { "start": { "line": 71, "column": 4 }, "end": { "line": 71, "column": null } },
				"20": { "start": { "line": 75, "column": 24 }, "end": { "line": 75, "column": null } },
				"21": { "start": { "line": 78, "column": 3 }, "end": { "line": 80, "column": null } },
				"22": { "start": { "line": 79, "column": 4 }, "end": { "line": 79, "column": null } },
				"23": { "start": { "line": 82, "column": 3 }, "end": { "line": 82, "column": null } },
				"24": { "start": { "line": 84, "column": 3 }, "end": { "line": 87, "column": null } },
				"25": { "start": { "line": 96, "column": 2 }, "end": { "line": 136, "column": null } },
				"26": { "start": { "line": 98, "column": 3 }, "end": { "line": 134, "column": null } },
				"27": { "start": { "line": 100, "column": 28 }, "end": { "line": 126, "column": null } },
				"28": { "start": { "line": 128, "column": 4 }, "end": { "line": 133, "column": null } },
				"29": { "start": { "line": 129, "column": 5 }, "end": { "line": 131, "column": null } },
				"30": { "start": { "line": 130, "column": 6 }, "end": { "line": 130, "column": null } },
				"31": { "start": { "line": 132, "column": 5 }, "end": { "line": 132, "column": null } },
				"32": { "start": { "line": 135, "column": 3 }, "end": { "line": 135, "column": null } },
				"33": { "start": { "line": 143, "column": 14 }, "end": { "line": 143, "column": null } },
				"34": { "start": { "line": 144, "column": 2 }, "end": { "line": 144, "column": null } },
				"35": { "start": { "line": 145, "column": 2 }, "end": { "line": 145, "column": null } },
				"36": { "start": { "line": 153, "column": 2 }, "end": { "line": 166, "column": null } },
				"37": { "start": { "line": 154, "column": 3 }, "end": { "line": 164, "column": null } },
				"38": { "start": { "line": 157, "column": 32 }, "end": { "line": 157, "column": 55 } },
				"39": { "start": { "line": 160, "column": 18 }, "end": { "line": 160, "column": null } },
				"40": { "start": { "line": 160, "column": 64 }, "end": { "line": 160, "column": null } },
				"41": { "start": { "line": 162, "column": 4 }, "end": { "line": 162, "column": null } },
				"42": { "start": { "line": 163, "column": 4 }, "end": { "line": 163, "column": null } },
				"43": { "start": { "line": 165, "column": 3 }, "end": { "line": 165, "column": null } },
				"44": { "start": { "line": 176, "column": 26 }, "end": { "line": 176, "column": 28 } },
				"45": { "start": { "line": 177, "column": 17 }, "end": { "line": 177, "column": null } },
				"46": { "start": { "line": 178, "column": 19 }, "end": { "line": 178, "column": null } },
				"47": { "start": { "line": 179, "column": 16 }, "end": { "line": 179, "column": null } },
				"48": { "start": { "line": 181, "column": 2 }, "end": { "line": 226, "column": null } },
				"49": { "start": { "line": 181, "column": 15 }, "end": { "line": 181, "column": 18 } },
				"50": { "start": { "line": 182, "column": 16 }, "end": { "line": 182, "column": 23 } },
				"51": { "start": { "line": 183, "column": 20 }, "end": { "line": 183, "column": null } },
				"52": { "start": { "line": 186, "column": 3 }, "end": { "line": 196, "column": null } },
				"53": { "start": { "line": 187, "column": 4 }, "end": { "line": 195, "column": null } },
				"54": { "start": { "line": 189, "column": 5 }, "end": { "line": 189, "column": null } },
				"55": { "start": { "line": 190, "column": 5 }, "end": { "line": 190, "column": null } },
				"56": { "start": { "line": 191, "column": 11 }, "end": { "line": 195, "column": null } },
				"57": { "start": { "line": 193, "column": 5 }, "end": { "line": 193, "column": null } },
				"58": { "start": { "line": 194, "column": 5 }, "end": { "line": 194, "column": null } },
				"59": { "start": { "line": 198, "column": 3 }, "end": { "line": 198, "column": null } },
				"60": { "start": { "line": 201, "column": 3 }, "end": { "line": 225, "column": null } },
				"61": { "start": { "line": 203, "column": 4 }, "end": { "line": 203, "column": null } },
				"62": { "start": { "line": 204, "column": 4 }, "end": { "line": 204, "column": null } },
				"63": { "start": { "line": 207, "column": 4 }, "end": { "line": 223, "column": null } },
				"64": { "start": { "line": 209, "column": 5 }, "end": { "line": 209, "column": null } },
				"65": { "start": { "line": 210, "column": 5 }, "end": { "line": 216, "column": null } },
				"66": { "start": { "line": 211, "column": 6 }, "end": { "line": 214, "column": null } },
				"67": { "start": { "line": 212, "column": 7 }, "end": { "line": 212, "column": null } },
				"68": { "start": { "line": 213, "column": 7 }, "end": { "line": 213, "column": null } },
				"69": { "start": { "line": 215, "column": 6 }, "end": { "line": 215, "column": null } },
				"70": { "start": { "line": 217, "column": 5 }, "end": { "line": 217, "column": 10 } },
				"71": { "start": { "line": 220, "column": 5 }, "end": { "line": 222, "column": null } },
				"72": { "start": { "line": 221, "column": 6 }, "end": { "line": 221, "column": null } },
				"73": { "start": { "line": 224, "column": 4 }, "end": { "line": 224, "column": null } },
				"74": { "start": { "line": 228, "column": 2 }, "end": { "line": 228, "column": null } },
				"75": { "start": { "line": 229, "column": 2 }, "end": { "line": 229, "column": null } },
				"76": { "start": { "line": 232, "column": 2 }, "end": { "line": 232, "column": 41 } },
				"77": { "start": { "line": 233, "column": 2 }, "end": { "line": 233, "column": 37 } },
				"78": { "start": { "line": 236, "column": 2 }, "end": { "line": 236, "column": null } },
				"79": { "start": { "line": 238, "column": 2 }, "end": { "line": 238, "column": null } },
				"80": { "start": { "line": 246, "column": 2 }, "end": { "line": 315, "column": null } },
				"81": { "start": { "line": 247, "column": 3 }, "end": { "line": 313, "column": null } },
				"82": { "start": { "line": 249, "column": 4 }, "end": { "line": 251, "column": null } },
				"83": { "start": { "line": 250, "column": 5 }, "end": { "line": 250, "column": null } },
				"84": { "start": { "line": 254, "column": 25 }, "end": { "line": 254, "column": null } },
				"85": { "start": { "line": 255, "column": 4 }, "end": { "line": 257, "column": null } },
				"86": { "start": { "line": 256, "column": 5 }, "end": { "line": 256, "column": null } },
				"87": { "start": { "line": 260, "column": 21 }, "end": { "line": 260, "column": null } },
				"88": { "start": { "line": 262, "column": 4 }, "end": { "line": 312, "column": null } },
				"89": { "start": { "line": 265, "column": 19 }, "end": { "line": 265, "column": null } },
				"90": { "start": { "line": 266, "column": 24 }, "end": { "line": 266, "column": null } },
				"91": { "start": { "line": 267, "column": 6 }, "end": { "line": 272, "column": null } },
				"92": { "start": { "line": 273, "column": 6 }, "end": { "line": 273, "column": null } },
				"93": { "start": { "line": 274, "column": 6 }, "end": { "line": 274, "column": null } },
				"94": { "start": { "line": 278, "column": 25 }, "end": { "line": 278, "column": 60 } },
				"95": { "start": { "line": 279, "column": 6 }, "end": { "line": 284, "column": null } },
				"96": { "start": { "line": 285, "column": 6 }, "end": { "line": 285, "column": null } },
				"97": { "start": { "line": 286, "column": 6 }, "end": { "line": 286, "column": null } },
				"98": { "start": { "line": 290, "column": 21 }, "end": { "line": 290, "column": 58 } },
				"99": { "start": { "line": 291, "column": 6 }, "end": { "line": 296, "column": null } },
				"100": { "start": { "line": 297, "column": 6 }, "end": { "line": 297, "column": null } },
				"101": { "start": { "line": 298, "column": 6 }, "end": { "line": 298, "column": null } },
				"102": { "start": { "line": 302, "column": 21 }, "end": { "line": 302, "column": null } },
				"103": { "start": { "line": 303, "column": 6 }, "end": { "line": 308, "column": null } },
				"104": { "start": { "line": 309, "column": 6 }, "end": { "line": 309, "column": null } },
				"105": { "start": { "line": 310, "column": 6 }, "end": { "line": 310, "column": null } },
				"106": { "start": { "line": 314, "column": 3 }, "end": { "line": 314, "column": null } },
				"107": { "start": { "line": 323, "column": 2 }, "end": { "line": 431, "column": null } },
				"108": { "start": { "line": 325, "column": 3 }, "end": { "line": 398, "column": null } },
				"109": { "start": { "line": 327, "column": 28 }, "end": { "line": 327, "column": null } },
				"110": { "start": { "line": 328, "column": 4 }, "end": { "line": 330, "column": null } },
				"111": { "start": { "line": 329, "column": 5 }, "end": { "line": 329, "column": null } },
				"112": { "start": { "line": 334, "column": 32 }, "end": { "line": 334, "column": null } },
				"113": { "start": { "line": 337, "column": 4 }, "end": { "line": 385, "column": null } },
				"114": { "start": { "line": 340, "column": 6 }, "end": { "line": 350, "column": null } },
				"115": { "start": { "line": 351, "column": 6 }, "end": { "line": 351, "column": null } },
				"116": { "start": { "line": 355, "column": 6 }, "end": { "line": 365, "column": null } },
				"117": { "start": { "line": 366, "column": 6 }, "end": { "line": 366, "column": null } },
				"118": { "start": { "line": 370, "column": 6 }, "end": { "line": 380, "column": null } },
				"119": { "start": { "line": 381, "column": 6 }, "end": { "line": 381, "column": null } },
				"120": { "start": { "line": 384, "column": 6 }, "end": { "line": 384, "column": null } },
				"121": { "start": { "line": 387, "column": 4 }, "end": { "line": 397, "column": null } },
				"122": { "start": { "line": 389, "column": 31 }, "end": { "line": 389, "column": 56 } },
				"123": { "start": { "line": 390, "column": 5 }, "end": { "line": 395, "column": null } },
				"124": { "start": { "line": 396, "column": 5 }, "end": { "line": 396, "column": null } },
				"125": { "start": { "line": 401, "column": 3 }, "end": { "line": 428, "column": null } },
				"126": { "start": { "line": 402, "column": 28 }, "end": { "line": 402, "column": null } },
				"127": { "start": { "line": 403, "column": 4 }, "end": { "line": 405, "column": null } },
				"128": { "start": { "line": 404, "column": 5 }, "end": { "line": 404, "column": null } },
				"129": { "start": { "line": 407, "column": 28 }, "end": { "line": 417, "column": null } },
				"130": { "start": { "line": 420, "column": 30 }, "end": { "line": 420, "column": 44 } },
				"131": { "start": { "line": 421, "column": 4 }, "end": { "line": 426, "column": null } },
				"132": { "start": { "line": 427, "column": 4 }, "end": { "line": 427, "column": null } },
				"133": { "start": { "line": 430, "column": 3 }, "end": { "line": 430, "column": null } },
				"134": { "start": { "line": 438, "column": 2 }, "end": { "line": 440, "column": null } },
				"135": { "start": { "line": 439, "column": 3 }, "end": { "line": 439, "column": null } },
				"136": { "start": { "line": 443, "column": 2 }, "end": { "line": 443, "column": null } },
				"137": { "start": { "line": 446, "column": 2 }, "end": { "line": 448, "column": null } },
				"138": { "start": { "line": 447, "column": 3 }, "end": { "line": 447, "column": null } },
				"139": { "start": { "line": 447, "column": 28 }, "end": { "line": 447, "column": null } },
				"140": { "start": { "line": 450, "column": 2 }, "end": { "line": 454, "column": null } },
				"141": { "start": { "line": 451, "column": 3 }, "end": { "line": 453, "column": null } },
				"142": { "start": { "line": 452, "column": 4 }, "end": { "line": 452, "column": null } },
				"143": { "start": { "line": 456, "column": 2 }, "end": { "line": 456, "column": null } },
				"144": { "start": { "line": 22, "column": 9 }, "end": { "line": 22, "column": null } },
				"145": { "start": { "line": 23, "column": 9 }, "end": { "line": 23, "column": null } },
				"146": { "start": { "line": 467, "column": 20 }, "end": { "line": 467, "column": null } },
				"147": { "start": { "line": 468, "column": 1 }, "end": { "line": 468, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "(anonymous_3)",
					"decl": { "start": { "line": 28, "column": 1 }, "end": { "line": 28, "column": null } },
					"loc": { "start": { "line": 38, "column": 56 }, "end": { "line": 89, "column": null } }
				},
				"1": {
					"name": "(anonymous_4)",
					"decl": { "start": { "line": 95, "column": 1 }, "end": { "line": 95, "column": 20 } },
					"loc": { "start": { "line": 95, "column": 36 }, "end": { "line": 137, "column": null } }
				},
				"2": {
					"name": "(anonymous_5)",
					"decl": { "start": { "line": 96, "column": 27 }, "end": { "line": 96, "column": null } },
					"loc": { "start": { "line": 96, "column": 27 }, "end": { "line": 136, "column": null } }
				},
				"3": {
					"name": "(anonymous_6)",
					"decl": { "start": { "line": 142, "column": 1 }, "end": { "line": 142, "column": 38 } },
					"loc": { "start": { "line": 142, "column": 39 }, "end": { "line": 146, "column": null } }
				},
				"4": {
					"name": "(anonymous_7)",
					"decl": { "start": { "line": 152, "column": 1 }, "end": { "line": 152, "column": 22 } },
					"loc": { "start": { "line": 152, "column": 38 }, "end": { "line": 167, "column": null } }
				},
				"5": {
					"name": "(anonymous_8)",
					"decl": { "start": { "line": 153, "column": 27 }, "end": { "line": 153, "column": null } },
					"loc": { "start": { "line": 153, "column": 27 }, "end": { "line": 166, "column": null } }
				},
				"6": {
					"name": "(anonymous_9)",
					"decl": { "start": { "line": 160, "column": 46 }, "end": { "line": 160, "column": 47 } },
					"loc": { "start": { "line": 160, "column": 64 }, "end": { "line": 160, "column": null } }
				},
				"7": {
					"name": "(anonymous_10)",
					"decl": { "start": { "line": 173, "column": 1 }, "end": { "line": 173, "column": 15 } },
					"loc": { "start": { "line": 173, "column": 38 }, "end": { "line": 239, "column": null } }
				},
				"8": {
					"name": "(anonymous_11)",
					"decl": { "start": { "line": 245, "column": 1 }, "end": { "line": 245, "column": 22 } },
					"loc": { "start": { "line": 245, "column": 63 }, "end": { "line": 316, "column": null } }
				},
				"9": {
					"name": "(anonymous_12)",
					"decl": { "start": { "line": 246, "column": 27 }, "end": { "line": 246, "column": null } },
					"loc": { "start": { "line": 246, "column": 27 }, "end": { "line": 315, "column": null } }
				},
				"10": {
					"name": "(anonymous_13)",
					"decl": { "start": { "line": 322, "column": 1 }, "end": { "line": 322, "column": 29 } },
					"loc": { "start": { "line": 322, "column": 70 }, "end": { "line": 432, "column": null } }
				},
				"11": {
					"name": "(anonymous_14)",
					"decl": { "start": { "line": 323, "column": 27 }, "end": { "line": 323, "column": null } },
					"loc": { "start": { "line": 323, "column": 27 }, "end": { "line": 431, "column": null } }
				},
				"12": {
					"name": "(anonymous_15)",
					"decl": { "start": { "line": 437, "column": 1 }, "end": { "line": 437, "column": 16 } },
					"loc": { "start": { "line": 437, "column": 64 }, "end": { "line": 457, "column": null } }
				},
				"13": {
					"name": "(anonymous_16)",
					"decl": { "start": { "line": 447, "column": 19 }, "end": { "line": 447, "column": 28 } },
					"loc": { "start": { "line": 447, "column": 28 }, "end": { "line": 447, "column": null } }
				},
				"14": {
					"name": "obfuscateLua",
					"decl": { "start": { "line": 463, "column": 16 }, "end": { "line": 463, "column": null } },
					"loc": { "start": { "line": 465, "column": 29 }, "end": { "line": 469, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 30, "column": 2 }, "end": { "line": 37, "column": 3 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 30, "column": 32 }, "end": { "line": 37, "column": 3 } }]
				},
				"1": {
					"loc": { "start": { "line": 46, "column": 3 }, "end": { "line": 51, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 46, "column": 3 }, "end": { "line": 51, "column": null } }]
				},
				"2": {
					"loc": { "start": { "line": 49, "column": 12 }, "end": { "line": 49, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 49, "column": 12 }, "end": { "line": 49, "column": 29 } },
						{ "start": { "line": 49, "column": 33 }, "end": { "line": 49, "column": null } }
					]
				},
				"3": {
					"loc": { "start": { "line": 55, "column": 27 }, "end": { "line": 55, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 55, "column": 27 }, "end": { "line": 55, "column": 50 } },
						{ "start": { "line": 55, "column": 54 }, "end": { "line": 55, "column": null } }
					]
				},
				"4": {
					"loc": { "start": { "line": 58, "column": 3 }, "end": { "line": 60, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 58, "column": 3 }, "end": { "line": 60, "column": null } }]
				},
				"5": {
					"loc": { "start": { "line": 62, "column": 3 }, "end": { "line": 64, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 62, "column": 3 }, "end": { "line": 64, "column": null } }]
				},
				"6": {
					"loc": { "start": { "line": 66, "column": 3 }, "end": { "line": 68, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 66, "column": 3 }, "end": { "line": 68, "column": null } }]
				},
				"7": {
					"loc": { "start": { "line": 70, "column": 3 }, "end": { "line": 72, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 70, "column": 3 }, "end": { "line": 72, "column": null } }]
				},
				"8": {
					"loc": { "start": { "line": 78, "column": 3 }, "end": { "line": 80, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 78, "column": 3 }, "end": { "line": 80, "column": null } }]
				},
				"9": {
					"loc": { "start": { "line": 86, "column": 11 }, "end": { "line": 86, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 86, "column": 11 }, "end": { "line": 86, "column": 24 } },
						{ "start": { "line": 86, "column": 28 }, "end": { "line": 86, "column": null } }
					]
				},
				"10": {
					"loc": { "start": { "line": 98, "column": 3 }, "end": { "line": 134, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 98, "column": 3 }, "end": { "line": 134, "column": null } }]
				},
				"11": {
					"loc": { "start": { "line": 98, "column": 7 }, "end": { "line": 98, "column": 46 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 98, "column": 7 }, "end": { "line": 98, "column": 37 } },
						{ "start": { "line": 98, "column": 37 }, "end": { "line": 98, "column": 46 } }
					]
				},
				"12": {
					"loc": { "start": { "line": 128, "column": 4 }, "end": { "line": 133, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 128, "column": 4 }, "end": { "line": 133, "column": null } }]
				},
				"13": {
					"loc": { "start": { "line": 129, "column": 5 }, "end": { "line": 131, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 129, "column": 5 }, "end": { "line": 131, "column": null } }]
				},
				"14": {
					"loc": { "start": { "line": 154, "column": 3 }, "end": { "line": 164, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 154, "column": 3 }, "end": { "line": 164, "column": null } }]
				},
				"15": {
					"loc": { "start": { "line": 154, "column": 7 }, "end": { "line": 154, "column": 48 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 154, "column": 7 }, "end": { "line": 154, "column": 40 } },
						{ "start": { "line": 154, "column": 40 }, "end": { "line": 154, "column": 48 } }
					]
				},
				"16": {
					"loc": { "start": { "line": 183, "column": 20 }, "end": { "line": 183, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 183, "column": 28 }, "end": { "line": 183, "column": 39 } },
						{ "start": { "line": 183, "column": 42 }, "end": { "line": 183, "column": null } }
					]
				},
				"17": {
					"loc": { "start": { "line": 186, "column": 3 }, "end": { "line": 196, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 186, "column": 3 }, "end": { "line": 196, "column": null } }]
				},
				"18": {
					"loc": { "start": { "line": 186, "column": 7 }, "end": { "line": 186, "column": 60 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 186, "column": 8 }, "end": { "line": 186, "column": 24 } },
						{ "start": { "line": 186, "column": 24 }, "end": { "line": 186, "column": 35 } },
						{ "start": { "line": 186, "column": 41 }, "end": { "line": 186, "column": 60 } }
					]
				},
				"19": {
					"loc": { "start": { "line": 187, "column": 4 }, "end": { "line": 195, "column": null } },
					"type": "if",
					"locations": [
						{ "start": { "line": 187, "column": 4 }, "end": { "line": 195, "column": null } },
						{ "start": { "line": 191, "column": 11 }, "end": { "line": 195, "column": null } }
					]
				},
				"20": {
					"loc": { "start": { "line": 191, "column": 11 }, "end": { "line": 195, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 191, "column": 11 }, "end": { "line": 195, "column": null } }]
				},
				"21": {
					"loc": { "start": { "line": 201, "column": 3 }, "end": { "line": 225, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 201, "column": 3 }, "end": { "line": 225, "column": null } }]
				},
				"22": {
					"loc": { "start": { "line": 201, "column": 7 }, "end": { "line": 201, "column": 80 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 201, "column": 7 }, "end": { "line": 201, "column": 20 } },
						{ "start": { "line": 201, "column": 20 }, "end": { "line": 201, "column": 36 } },
						{ "start": { "line": 201, "column": 36 }, "end": { "line": 201, "column": 55 } },
						{ "start": { "line": 201, "column": 59 }, "end": { "line": 201, "column": 80 } }
					]
				},
				"23": {
					"loc": { "start": { "line": 207, "column": 4 }, "end": { "line": 223, "column": null } },
					"type": "if",
					"locations": [
						{ "start": { "line": 207, "column": 4 }, "end": { "line": 223, "column": null } },
						{ "start": { "line": 218, "column": 11 }, "end": { "line": 223, "column": null } }
					]
				},
				"24": {
					"loc": { "start": { "line": 207, "column": 8 }, "end": { "line": 207, "column": 75 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 207, "column": 8 }, "end": { "line": 207, "column": 27 } },
						{ "start": { "line": 207, "column": 31 }, "end": { "line": 207, "column": 54 } },
						{ "start": { "line": 207, "column": 54 }, "end": { "line": 207, "column": 75 } }
					]
				},
				"25": {
					"loc": { "start": { "line": 211, "column": 6 }, "end": { "line": 214, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 211, "column": 6 }, "end": { "line": 214, "column": null } }]
				},
				"26": {
					"loc": { "start": { "line": 211, "column": 10 }, "end": { "line": 211, "column": 50 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 211, "column": 10 }, "end": { "line": 211, "column": 29 } },
						{ "start": { "line": 211, "column": 29 }, "end": { "line": 211, "column": 50 } }
					]
				},
				"27": {
					"loc": { "start": { "line": 220, "column": 12 }, "end": { "line": 220, "column": 49 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 220, "column": 12 }, "end": { "line": 220, "column": 27 } },
						{ "start": { "line": 220, "column": 31 }, "end": { "line": 220, "column": 49 } }
					]
				},
				"28": {
					"loc": { "start": { "line": 247, "column": 3 }, "end": { "line": 313, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 247, "column": 3 }, "end": { "line": 313, "column": null } }]
				},
				"29": {
					"loc": { "start": { "line": 247, "column": 7 }, "end": { "line": 247, "column": 73 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 247, "column": 7 }, "end": { "line": 247, "column": 41 } },
						{ "start": { "line": 247, "column": 41 }, "end": { "line": 247, "column": 73 } }
					]
				},
				"30": {
					"loc": { "start": { "line": 249, "column": 4 }, "end": { "line": 251, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 249, "column": 4 }, "end": { "line": 251, "column": null } }]
				},
				"31": {
					"loc": { "start": { "line": 249, "column": 8 }, "end": { "line": 249, "column": 44 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 249, "column": 8 }, "end": { "line": 249, "column": 27 } },
						{ "start": { "line": 249, "column": 27 }, "end": { "line": 249, "column": 44 } }
					]
				},
				"32": {
					"loc": { "start": { "line": 255, "column": 4 }, "end": { "line": 257, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 255, "column": 4 }, "end": { "line": 257, "column": null } }]
				},
				"33": {
					"loc": { "start": { "line": 262, "column": 4 }, "end": { "line": 312, "column": null } },
					"type": "switch",
					"locations": [
						{ "start": { "line": 263, "column": 5 }, "end": { "line": 275, "column": null } },
						{ "start": { "line": 276, "column": 5 }, "end": { "line": 287, "column": null } },
						{ "start": { "line": 288, "column": 5 }, "end": { "line": 299, "column": null } },
						{ "start": { "line": 300, "column": 5 }, "end": { "line": 311, "column": null } }
					]
				},
				"34": {
					"loc": { "start": { "line": 325, "column": 3 }, "end": { "line": 398, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 325, "column": 3 }, "end": { "line": 398, "column": null } }]
				},
				"35": {
					"loc": { "start": { "line": 325, "column": 7 }, "end": { "line": 325, "column": 79 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 325, "column": 7 }, "end": { "line": 325, "column": 38 } },
						{ "start": { "line": 325, "column": 38 }, "end": { "line": 325, "column": 50 } },
						{ "start": { "line": 325, "column": 54 }, "end": { "line": 325, "column": 79 } }
					]
				},
				"36": {
					"loc": { "start": { "line": 328, "column": 4 }, "end": { "line": 330, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 328, "column": 4 }, "end": { "line": 330, "column": null } }]
				},
				"37": {
					"loc": { "start": { "line": 337, "column": 4 }, "end": { "line": 385, "column": null } },
					"type": "switch",
					"locations": [
						{ "start": { "line": 338, "column": 5 }, "end": { "line": 352, "column": null } },
						{ "start": { "line": 353, "column": 5 }, "end": { "line": 367, "column": null } },
						{ "start": { "line": 368, "column": 5 }, "end": { "line": 382, "column": null } },
						{ "start": { "line": 383, "column": 5 }, "end": { "line": 384, "column": null } }
					]
				},
				"38": {
					"loc": { "start": { "line": 387, "column": 4 }, "end": { "line": 397, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 387, "column": 4 }, "end": { "line": 397, "column": null } }]
				},
				"39": {
					"loc": { "start": { "line": 401, "column": 3 }, "end": { "line": 428, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 401, "column": 3 }, "end": { "line": 428, "column": null } }]
				},
				"40": {
					"loc": { "start": { "line": 401, "column": 7 }, "end": { "line": 401, "column": 55 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 401, "column": 7 }, "end": { "line": 401, "column": 41 } },
						{ "start": { "line": 401, "column": 41 }, "end": { "line": 401, "column": 55 } }
					]
				},
				"41": {
					"loc": { "start": { "line": 403, "column": 4 }, "end": { "line": 405, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 403, "column": 4 }, "end": { "line": 405, "column": null } }]
				},
				"42": {
					"loc": { "start": { "line": 438, "column": 2 }, "end": { "line": 440, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 438, "column": 2 }, "end": { "line": 440, "column": null } }]
				},
				"43": {
					"loc": { "start": { "line": 438, "column": 6 }, "end": { "line": 438, "column": 41 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 438, "column": 6 }, "end": { "line": 438, "column": 15 } },
						{ "start": { "line": 438, "column": 15 }, "end": { "line": 438, "column": 41 } }
					]
				},
				"44": {
					"loc": { "start": { "line": 446, "column": 2 }, "end": { "line": 448, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 446, "column": 2 }, "end": { "line": 448, "column": null } }]
				},
				"45": {
					"loc": { "start": { "line": 451, "column": 3 }, "end": { "line": 453, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 451, "column": 3 }, "end": { "line": 453, "column": null } }]
				},
				"46": {
					"loc": { "start": { "line": 451, "column": 7 }, "end": { "line": 451, "column": 53 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 451, "column": 7 }, "end": { "line": 451, "column": 35 } },
						{ "start": { "line": 451, "column": 35 }, "end": { "line": 451, "column": 53 } }
					]
				}
			},
			"s": {
				"0": 38,
				"1": 39,
				"2": 2,
				"3": 2,
				"4": 102,
				"5": 102,
				"6": 102,
				"7": 102,
				"8": 102,
				"9": 8,
				"10": 94,
				"11": 94,
				"12": 94,
				"13": 76,
				"14": 94,
				"15": 39,
				"16": 94,
				"17": 0,
				"18": 94,
				"19": 0,
				"20": 94,
				"21": 94,
				"22": 46,
				"23": 94,
				"24": 0,
				"25": 76,
				"26": 4763,
				"27": 310,
				"28": 310,
				"29": 243,
				"30": 183,
				"31": 243,
				"32": 4763,
				"33": 183,
				"34": 183,
				"35": 183,
				"36": 39,
				"37": 3497,
				"38": 15,
				"39": 15,
				"40": 78,
				"41": 15,
				"42": 15,
				"43": 3497,
				"44": 46,
				"45": 46,
				"46": 46,
				"47": 46,
				"48": 46,
				"49": 46,
				"50": 3626,
				"51": 3626,
				"52": 3626,
				"53": 4,
				"54": 2,
				"55": 2,
				"56": 2,
				"57": 2,
				"58": 2,
				"59": 3626,
				"60": 3626,
				"61": 0,
				"62": 0,
				"63": 0,
				"64": 0,
				"65": 0,
				"66": 0,
				"67": 0,
				"68": 0,
				"69": 0,
				"70": 0,
				"71": 0,
				"72": 0,
				"73": 0,
				"74": 46,
				"75": 46,
				"76": 46,
				"77": 46,
				"78": 46,
				"79": 46,
				"80": 0,
				"81": 0,
				"82": 0,
				"83": 0,
				"84": 0,
				"85": 0,
				"86": 0,
				"87": 0,
				"88": 0,
				"89": 0,
				"90": 0,
				"91": 0,
				"92": 0,
				"93": 0,
				"94": 0,
				"95": 0,
				"96": 0,
				"97": 0,
				"98": 0,
				"99": 0,
				"100": 0,
				"101": 0,
				"102": 0,
				"103": 0,
				"104": 0,
				"105": 0,
				"106": 0,
				"107": 0,
				"108": 0,
				"109": 0,
				"110": 0,
				"111": 0,
				"112": 0,
				"113": 0,
				"114": 0,
				"115": 0,
				"116": 0,
				"117": 0,
				"118": 0,
				"119": 0,
				"120": 0,
				"121": 0,
				"122": 0,
				"123": 0,
				"124": 0,
				"125": 0,
				"126": 0,
				"127": 0,
				"128": 0,
				"129": 0,
				"130": 0,
				"131": 0,
				"132": 0,
				"133": 0,
				"134": 19889,
				"135": 11629,
				"136": 8260,
				"137": 8260,
				"138": 2316,
				"139": 4077,
				"140": 5944,
				"141": 15697,
				"142": 15697,
				"143": 5944,
				"144": 77,
				"145": 77,
				"146": 39,
				"147": 39
			},
			"f": {
				"0": 102,
				"1": 76,
				"2": 4763,
				"3": 183,
				"4": 39,
				"5": 3497,
				"6": 78,
				"7": 46,
				"8": 0,
				"9": 0,
				"10": 0,
				"11": 0,
				"12": 19889,
				"13": 4077,
				"14": 39
			},
			"b": {
				"0": [39],
				"1": [8],
				"2": [8, 0],
				"3": [94, 63],
				"4": [76],
				"5": [39],
				"6": [0],
				"7": [0],
				"8": [46],
				"9": [0, 0],
				"10": [310],
				"11": [4763, 310],
				"12": [243],
				"13": [183],
				"14": [15],
				"15": [3497, 15],
				"16": [3582, 44],
				"17": [4],
				"18": [3626, 3622, 4],
				"19": [2, 2],
				"20": [2],
				"21": [0],
				"22": [3626, 3608, 4, 4],
				"23": [0, 0],
				"24": [0, 0, 0],
				"25": [0],
				"26": [0, 0],
				"27": [0, 0],
				"28": [0],
				"29": [0, 0],
				"30": [0],
				"31": [0, 0],
				"32": [0],
				"33": [0, 0, 0, 0],
				"34": [0],
				"35": [0, 0, 0],
				"36": [0],
				"37": [0, 0, 0, 0],
				"38": [0],
				"39": [0],
				"40": [0, 0],
				"41": [0],
				"42": [11629],
				"43": [19889, 19091],
				"44": [2316],
				"45": [15697],
				"46": [15697, 15697]
			}
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/lib/generator.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/lib/generator.ts",
			"statementMap": {
				"0": { "start": { "line": 6, "column": 16 }, "end": { "line": 6, "column": 28 } },
				"1": { "start": { "line": 7, "column": 1 }, "end": { "line": 7, "column": null } },
				"2": { "start": { "line": 7, "column": 11 }, "end": { "line": 7, "column": null } },
				"3": { "start": { "line": 8, "column": 1 }, "end": { "line": 8, "column": null } },
				"4": { "start": { "line": 12, "column": 1 }, "end": { "line": 12, "column": null } },
				"5": { "start": { "line": 12, "column": 12 }, "end": { "line": 12, "column": null } },
				"6": { "start": { "line": 14, "column": 1 }, "end": { "line": 93, "column": null } },
				"7": { "start": { "line": 16, "column": 3 }, "end": { "line": 16, "column": null } },
				"8": { "start": { "line": 19, "column": 3 }, "end": { "line": 19, "column": null } },
				"9": { "start": { "line": 22, "column": 3 }, "end": { "line": 22, "column": null } },
				"10": { "start": { "line": 25, "column": 3 }, "end": { "line": 25, "column": null } },
				"11": { "start": { "line": 28, "column": 3 }, "end": { "line": 28, "column": null } },
				"12": { "start": { "line": 31, "column": 3 }, "end": { "line": 31, "column": null } },
				"13": { "start": { "line": 34, "column": 3 }, "end": { "line": 34, "column": null } },
				"14": { "start": { "line": 37, "column": 3 }, "end": { "line": 37, "column": null } },
				"15": { "start": { "line": 40, "column": 3 }, "end": { "line": 40, "column": null } },
				"16": { "start": { "line": 43, "column": 3 }, "end": { "line": 43, "column": null } },
				"17": { "start": { "line": 46, "column": 3 }, "end": { "line": 46, "column": null } },
				"18": { "start": { "line": 49, "column": 3 }, "end": { "line": 49, "column": null } },
				"19": { "start": { "line": 52, "column": 3 }, "end": { "line": 52, "column": 42 } },
				"20": { "start": { "line": 55, "column": 3 }, "end": { "line": 55, "column": null } },
				"21": { "start": { "line": 58, "column": 3 }, "end": { "line": 58, "column": null } },
				"22": { "start": { "line": 61, "column": 3 }, "end": { "line": 61, "column": null } },
				"23": { "start": { "line": 64, "column": 3 }, "end": { "line": 64, "column": null } },
				"24": { "start": { "line": 67, "column": 3 }, "end": { "line": 67, "column": null } },
				"25": { "start": { "line": 70, "column": 3 }, "end": { "line": 70, "column": null } },
				"26": { "start": { "line": 73, "column": 3 }, "end": { "line": 73, "column": null } },
				"27": { "start": { "line": 76, "column": 3 }, "end": { "line": 76, "column": null } },
				"28": { "start": { "line": 79, "column": 3 }, "end": { "line": 79, "column": null } },
				"29": { "start": { "line": 82, "column": 3 }, "end": { "line": 82, "column": null } },
				"30": { "start": { "line": 85, "column": 3 }, "end": { "line": 85, "column": null } },
				"31": { "start": { "line": 88, "column": 3 }, "end": { "line": 88, "column": null } },
				"32": { "start": { "line": 91, "column": 3 }, "end": { "line": 91, "column": null } },
				"33": { "start": { "line": 92, "column": 3 }, "end": { "line": 92, "column": null } },
				"34": { "start": { "line": 97, "column": 1 }, "end": { "line": 97, "column": null } },
				"35": { "start": { "line": 101, "column": 14 }, "end": { "line": 101, "column": null } },
				"36": { "start": { "line": 102, "column": 1 }, "end": { "line": 105, "column": null } },
				"37": { "start": { "line": 103, "column": 15 }, "end": { "line": 103, "column": null } },
				"38": { "start": { "line": 104, "column": 2 }, "end": { "line": 104, "column": null } },
				"39": { "start": { "line": 106, "column": 1 }, "end": { "line": 106, "column": null } },
				"40": { "start": { "line": 110, "column": 14 }, "end": { "line": 110, "column": null } },
				"41": { "start": { "line": 111, "column": 14 }, "end": { "line": 111, "column": null } },
				"42": { "start": { "line": 112, "column": 1 }, "end": { "line": 112, "column": null } },
				"43": { "start": { "line": 117, "column": 1 }, "end": { "line": 120, "column": null } },
				"44": { "start": { "line": 119, "column": 2 }, "end": { "line": 119, "column": null } },
				"45": { "start": { "line": 123, "column": 1 }, "end": { "line": 123, "column": null } },
				"46": { "start": { "line": 128, "column": 1 }, "end": { "line": 137, "column": null } },
				"47": { "start": { "line": 131, "column": 16 }, "end": { "line": 131, "column": null } },
				"48": { "start": { "line": 131, "column": 53 }, "end": { "line": 131, "column": 89 } },
				"49": { "start": { "line": 134, "column": 2 }, "end": { "line": 136, "column": null } },
				"50": { "start": { "line": 135, "column": 3 }, "end": { "line": 135, "column": null } },
				"51": { "start": { "line": 141, "column": 1 }, "end": { "line": 144, "column": null } },
				"52": { "start": { "line": 143, "column": 2 }, "end": { "line": 143, "column": null } },
				"53": { "start": { "line": 147, "column": 19 }, "end": { "line": 147, "column": null } },
				"54": { "start": { "line": 148, "column": 15 }, "end": { "line": 148, "column": null } },
				"55": { "start": { "line": 149, "column": 1 }, "end": { "line": 149, "column": null } },
				"56": { "start": { "line": 153, "column": 17 }, "end": { "line": 153, "column": null } },
				"57": { "start": { "line": 154, "column": 14 }, "end": { "line": 154, "column": null } },
				"58": { "start": { "line": 155, "column": 16 }, "end": { "line": 155, "column": null } },
				"59": { "start": { "line": 156, "column": 14 }, "end": { "line": 156, "column": null } },
				"60": { "start": { "line": 158, "column": 1 }, "end": { "line": 158, "column": null } },
				"61": { "start": { "line": 162, "column": 1 }, "end": { "line": 162, "column": null } },
				"62": { "start": { "line": 166, "column": 14 }, "end": { "line": 166, "column": null } },
				"63": { "start": { "line": 167, "column": 14 }, "end": { "line": 167, "column": null } },
				"64": { "start": { "line": 168, "column": 1 }, "end": { "line": 168, "column": null } },
				"65": { "start": { "line": 172, "column": 14 }, "end": { "line": 172, "column": null } },
				"66": { "start": { "line": 173, "column": 15 }, "end": { "line": 173, "column": null } },
				"67": { "start": { "line": 174, "column": 1 }, "end": { "line": 174, "column": null } },
				"68": { "start": { "line": 178, "column": 13 }, "end": { "line": 178, "column": null } },
				"69": { "start": { "line": 180, "column": 1 }, "end": { "line": 182, "column": null } },
				"70": { "start": { "line": 181, "column": 2 }, "end": { "line": 181, "column": null } },
				"71": { "start": { "line": 184, "column": 1 }, "end": { "line": 184, "column": null } },
				"72": { "start": { "line": 188, "column": 14 }, "end": { "line": 188, "column": null } },
				"73": { "start": { "line": 189, "column": 20 }, "end": { "line": 189, "column": null } },
				"74": { "start": { "line": 190, "column": 1 }, "end": { "line": 190, "column": null } },
				"75": { "start": { "line": 194, "column": 14 }, "end": { "line": 194, "column": null } },
				"76": { "start": { "line": 195, "column": 15 }, "end": { "line": 195, "column": null } },
				"77": { "start": { "line": 196, "column": 1 }, "end": { "line": 196, "column": null } },
				"78": { "start": { "line": 200, "column": 1 }, "end": { "line": 200, "column": null } },
				"79": { "start": { "line": 200, "column": 47 }, "end": { "line": 200, "column": null } },
				"80": { "start": { "line": 202, "column": 16 }, "end": { "line": 215, "column": null } },
				"81": { "start": { "line": 203, "column": 2 }, "end": { "line": 213, "column": null } },
				"82": { "start": { "line": 204, "column": 15 }, "end": { "line": 204, "column": null } },
				"83": { "start": { "line": 205, "column": 17 }, "end": { "line": 205, "column": null } },
				"84": { "start": { "line": 206, "column": 3 }, "end": { "line": 206, "column": null } },
				"85": { "start": { "line": 207, "column": 9 }, "end": { "line": 213, "column": null } },
				"86": { "start": { "line": 208, "column": 15 }, "end": { "line": 208, "column": null } },
				"87": { "start": { "line": 209, "column": 17 }, "end": { "line": 209, "column": null } },
				"88": { "start": { "line": 210, "column": 3 }, "end": { "line": 210, "column": null } },
				"89": { "start": { "line": 211, "column": 9 }, "end": { "line": 213, "column": null } },
				"90": { "start": { "line": 212, "column": 3 }, "end": { "line": 212, "column": null } },
				"91": { "start": { "line": 214, "column": 2 }, "end": { "line": 214, "column": null } },
				"92": { "start": { "line": 217, "column": 1 }, "end": { "line": 217, "column": null } },
				"93": { "start": { "line": 221, "column": 1 }, "end": { "line": 221, "column": null } },
				"94": { "start": { "line": 221, "column": 53 }, "end": { "line": 221, "column": null } },
				"95": { "start": { "line": 222, "column": 14 }, "end": { "line": 222, "column": null } },
				"96": { "start": { "line": 223, "column": 1 }, "end": { "line": 223, "column": null } },
				"97": { "start": { "line": 227, "column": 14 }, "end": { "line": 227, "column": null } },
				"98": { "start": { "line": 230, "column": 1 }, "end": { "line": 245, "column": null } },
				"99": { "start": { "line": 230, "column": 14 }, "end": { "line": 230, "column": 17 } },
				"100": { "start": { "line": 231, "column": 17 }, "end": { "line": 231, "column": 32 } },
				"101": { "start": { "line": 233, "column": 2 }, "end": { "line": 244, "column": null } },
				"102": { "start": { "line": 234, "column": 21 }, "end": { "line": 234, "column": null } },
				"103": { "start": { "line": 235, "column": 16 }, "end": { "line": 235, "column": null } },
				"104": { "start": { "line": 236, "column": 3 }, "end": { "line": 236, "column": null } },
				"105": { "start": { "line": 237, "column": 9 }, "end": { "line": 244, "column": null } },
				"106": { "start": { "line": 238, "column": 21 }, "end": { "line": 238, "column": null } },
				"107": { "start": { "line": 239, "column": 16 }, "end": { "line": 239, "column": null } },
				"108": { "start": { "line": 240, "column": 3 }, "end": { "line": 240, "column": null } },
				"109": { "start": { "line": 241, "column": 9 }, "end": { "line": 244, "column": null } },
				"110": { "start": { "line": 242, "column": 16 }, "end": { "line": 242, "column": null } },
				"111": { "start": { "line": 243, "column": 3 }, "end": { "line": 243, "column": null } },
				"112": { "start": { "line": 247, "column": 1 }, "end": { "line": 247, "column": null } },
				"113": { "start": { "line": 248, "column": 1 }, "end": { "line": 248, "column": null } },
				"114": { "start": { "line": 252, "column": 19 }, "end": { "line": 252, "column": null } },
				"115": { "start": { "line": 253, "column": 14 }, "end": { "line": 253, "column": null } },
				"116": { "start": { "line": 254, "column": 1 }, "end": { "line": 254, "column": null } },
				"117": { "start": { "line": 258, "column": 19 }, "end": { "line": 258, "column": null } },
				"118": { "start": { "line": 259, "column": 14 }, "end": { "line": 259, "column": null } },
				"119": { "start": { "line": 260, "column": 1 }, "end": { "line": 260, "column": null } },
				"120": { "start": { "line": 264, "column": 18 }, "end": { "line": 264, "column": null } },
				"121": { "start": { "line": 265, "column": 15 }, "end": { "line": 265, "column": null } },
				"122": { "start": { "line": 266, "column": 13 }, "end": { "line": 266, "column": null } },
				"123": { "start": { "line": 267, "column": 14 }, "end": { "line": 267, "column": null } },
				"124": { "start": { "line": 268, "column": 14 }, "end": { "line": 268, "column": null } },
				"125": { "start": { "line": 269, "column": 1 }, "end": { "line": 269, "column": null } },
				"126": { "start": { "line": 273, "column": 19 }, "end": { "line": 273, "column": null } },
				"127": { "start": { "line": 274, "column": 19 }, "end": { "line": 274, "column": null } },
				"128": { "start": { "line": 275, "column": 14 }, "end": { "line": 275, "column": null } },
				"129": { "start": { "line": 276, "column": 1 }, "end": { "line": 276, "column": null } },
				"130": { "start": { "line": 280, "column": 14 }, "end": { "line": 280, "column": null } },
				"131": { "start": { "line": 281, "column": 1 }, "end": { "line": 281, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "generateLua",
					"decl": { "start": { "line": 6, "column": 16 }, "end": { "line": 6, "column": 28 } },
					"loc": { "start": { "line": 6, "column": 36 }, "end": { "line": 9, "column": null } }
				},
				"1": {
					"name": "generateNode",
					"decl": { "start": { "line": 11, "column": 9 }, "end": { "line": 11, "column": 22 } },
					"loc": { "start": { "line": 11, "column": 31 }, "end": { "line": 94, "column": null } }
				},
				"2": {
					"name": "generateChunk",
					"decl": { "start": { "line": 96, "column": 9 }, "end": { "line": 96, "column": 23 } },
					"loc": { "start": { "line": 96, "column": 32 }, "end": { "line": 98, "column": null } }
				},
				"3": {
					"name": "generateLocalStatement",
					"decl": { "start": { "line": 100, "column": 9 }, "end": { "line": 100, "column": 32 } },
					"loc": { "start": { "line": 100, "column": 41 }, "end": { "line": 107, "column": null } }
				},
				"4": {
					"name": "generateAssignmentStatement",
					"decl": { "start": { "line": 109, "column": 9 }, "end": { "line": 109, "column": 37 } },
					"loc": { "start": { "line": 109, "column": 46 }, "end": { "line": 113, "column": null } }
				},
				"5": {
					"name": "generateNumericLiteral",
					"decl": { "start": { "line": 115, "column": 9 }, "end": { "line": 115, "column": 32 } },
					"loc": { "start": { "line": 115, "column": 41 }, "end": { "line": 124, "column": null } }
				},
				"6": {
					"name": "generateStringLiteral",
					"decl": { "start": { "line": 126, "column": 9 }, "end": { "line": 126, "column": 31 } },
					"loc": { "start": { "line": 126, "column": 40 }, "end": { "line": 150, "column": null } }
				},
				"7": {
					"name": "(anonymous_8)",
					"decl": { "start": { "line": 131, "column": 41 }, "end": { "line": 131, "column": 42 } },
					"loc": { "start": { "line": 131, "column": 53 }, "end": { "line": 131, "column": 89 } }
				},
				"8": {
					"name": "generateFunctionDeclaration",
					"decl": { "start": { "line": 152, "column": 9 }, "end": { "line": 152, "column": 37 } },
					"loc": { "start": { "line": 152, "column": 46 }, "end": { "line": 159, "column": null } }
				},
				"9": {
					"name": "generateCallStatement",
					"decl": { "start": { "line": 161, "column": 9 }, "end": { "line": 161, "column": 31 } },
					"loc": { "start": { "line": 161, "column": 40 }, "end": { "line": 163, "column": null } }
				},
				"10": {
					"name": "generateCallExpression",
					"decl": { "start": { "line": 165, "column": 9 }, "end": { "line": 165, "column": 32 } },
					"loc": { "start": { "line": 165, "column": 41 }, "end": { "line": 169, "column": null } }
				},
				"11": {
					"name": "generateBinaryExpression",
					"decl": { "start": { "line": 171, "column": 9 }, "end": { "line": 171, "column": 34 } },
					"loc": { "start": { "line": 171, "column": 43 }, "end": { "line": 175, "column": null } }
				},
				"12": {
					"name": "generateUnaryExpression",
					"decl": { "start": { "line": 177, "column": 9 }, "end": { "line": 177, "column": 33 } },
					"loc": { "start": { "line": 177, "column": 42 }, "end": { "line": 185, "column": null } }
				},
				"13": {
					"name": "generateMemberExpression",
					"decl": { "start": { "line": 187, "column": 9 }, "end": { "line": 187, "column": 34 } },
					"loc": { "start": { "line": 187, "column": 43 }, "end": { "line": 191, "column": null } }
				},
				"14": {
					"name": "generateIndexExpression",
					"decl": { "start": { "line": 193, "column": 9 }, "end": { "line": 193, "column": 33 } },
					"loc": { "start": { "line": 193, "column": 42 }, "end": { "line": 197, "column": null } }
				},
				"15": {
					"name": "generateTableConstructor",
					"decl": { "start": { "line": 199, "column": 9 }, "end": { "line": 199, "column": 34 } },
					"loc": { "start": { "line": 199, "column": 43 }, "end": { "line": 218, "column": null } }
				},
				"16": {
					"name": "(anonymous_17)",
					"decl": { "start": { "line": 202, "column": 32 }, "end": { "line": 202, "column": 33 } },
					"loc": { "start": { "line": 202, "column": 33 }, "end": { "line": 215, "column": null } }
				},
				"17": {
					"name": "generateReturnStatement",
					"decl": { "start": { "line": 220, "column": 9 }, "end": { "line": 220, "column": 33 } },
					"loc": { "start": { "line": 220, "column": 42 }, "end": { "line": 224, "column": null } }
				},
				"18": {
					"name": "generateIfStatement",
					"decl": { "start": { "line": 226, "column": 9 }, "end": { "line": 226, "column": 29 } },
					"loc": { "start": { "line": 226, "column": 38 }, "end": { "line": 249, "column": null } }
				},
				"19": {
					"name": "generateWhileStatement",
					"decl": { "start": { "line": 251, "column": 9 }, "end": { "line": 251, "column": 32 } },
					"loc": { "start": { "line": 251, "column": 41 }, "end": { "line": 255, "column": null } }
				},
				"20": {
					"name": "generateRepeatStatement",
					"decl": { "start": { "line": 257, "column": 9 }, "end": { "line": 257, "column": 33 } },
					"loc": { "start": { "line": 257, "column": 42 }, "end": { "line": 261, "column": null } }
				},
				"21": {
					"name": "generateForNumericStatement",
					"decl": { "start": { "line": 263, "column": 9 }, "end": { "line": 263, "column": 37 } },
					"loc": { "start": { "line": 263, "column": 46 }, "end": { "line": 270, "column": null } }
				},
				"22": {
					"name": "generateForGenericStatement",
					"decl": { "start": { "line": 272, "column": 9 }, "end": { "line": 272, "column": 37 } },
					"loc": { "start": { "line": 272, "column": 46 }, "end": { "line": 277, "column": null } }
				},
				"23": {
					"name": "generateDoStatement",
					"decl": { "start": { "line": 279, "column": 9 }, "end": { "line": 279, "column": 29 } },
					"loc": { "start": { "line": 279, "column": 38 }, "end": { "line": 282, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 7, "column": 1 }, "end": { "line": 7, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 7, "column": 1 }, "end": { "line": 7, "column": null } }]
				},
				"1": {
					"loc": { "start": { "line": 12, "column": 1 }, "end": { "line": 12, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 12, "column": 1 }, "end": { "line": 12, "column": null } }]
				},
				"2": {
					"loc": { "start": { "line": 14, "column": 1 }, "end": { "line": 93, "column": null } },
					"type": "switch",
					"locations": [
						{ "start": { "line": 15, "column": 2 }, "end": { "line": 16, "column": null } },
						{ "start": { "line": 18, "column": 2 }, "end": { "line": 19, "column": null } },
						{ "start": { "line": 21, "column": 2 }, "end": { "line": 22, "column": null } },
						{ "start": { "line": 24, "column": 2 }, "end": { "line": 25, "column": null } },
						{ "start": { "line": 27, "column": 2 }, "end": { "line": 28, "column": null } },
						{ "start": { "line": 30, "column": 2 }, "end": { "line": 31, "column": null } },
						{ "start": { "line": 33, "column": 2 }, "end": { "line": 34, "column": null } },
						{ "start": { "line": 36, "column": 2 }, "end": { "line": 37, "column": null } },
						{ "start": { "line": 39, "column": 2 }, "end": { "line": 40, "column": null } },
						{ "start": { "line": 42, "column": 2 }, "end": { "line": 43, "column": null } },
						{ "start": { "line": 45, "column": 2 }, "end": { "line": 46, "column": null } },
						{ "start": { "line": 48, "column": 2 }, "end": { "line": 49, "column": null } },
						{ "start": { "line": 51, "column": 2 }, "end": { "line": 52, "column": 42 } },
						{ "start": { "line": 54, "column": 2 }, "end": { "line": 55, "column": null } },
						{ "start": { "line": 57, "column": 2 }, "end": { "line": 58, "column": null } },
						{ "start": { "line": 60, "column": 2 }, "end": { "line": 61, "column": null } },
						{ "start": { "line": 63, "column": 2 }, "end": { "line": 64, "column": null } },
						{ "start": { "line": 66, "column": 2 }, "end": { "line": 67, "column": null } },
						{ "start": { "line": 69, "column": 2 }, "end": { "line": 70, "column": null } },
						{ "start": { "line": 72, "column": 2 }, "end": { "line": 73, "column": null } },
						{ "start": { "line": 75, "column": 2 }, "end": { "line": 76, "column": null } },
						{ "start": { "line": 78, "column": 2 }, "end": { "line": 79, "column": null } },
						{ "start": { "line": 81, "column": 2 }, "end": { "line": 82, "column": null } },
						{ "start": { "line": 84, "column": 2 }, "end": { "line": 85, "column": null } },
						{ "start": { "line": 87, "column": 2 }, "end": { "line": 88, "column": null } },
						{ "start": { "line": 90, "column": 2 }, "end": { "line": 92, "column": null } }
					]
				},
				"3": {
					"loc": { "start": { "line": 102, "column": 1 }, "end": { "line": 105, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 102, "column": 1 }, "end": { "line": 105, "column": null } }]
				},
				"4": {
					"loc": { "start": { "line": 102, "column": 5 }, "end": { "line": 102, "column": 40 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 102, "column": 5 }, "end": { "line": 102, "column": 14 } },
						{ "start": { "line": 102, "column": 18 }, "end": { "line": 102, "column": 40 } }
					]
				},
				"5": {
					"loc": { "start": { "line": 117, "column": 1 }, "end": { "line": 120, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 117, "column": 1 }, "end": { "line": 120, "column": null } }]
				},
				"6": {
					"loc": { "start": { "line": 117, "column": 5 }, "end": { "line": 117, "column": 46 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 117, "column": 5 }, "end": { "line": 117, "column": 20 } },
						{ "start": { "line": 117, "column": 24 }, "end": { "line": 117, "column": 46 } }
					]
				},
				"7": {
					"loc": { "start": { "line": 128, "column": 1 }, "end": { "line": 137, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 128, "column": 1 }, "end": { "line": 137, "column": null } }]
				},
				"8": {
					"loc": { "start": { "line": 128, "column": 5 }, "end": { "line": 128, "column": 111 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 128, "column": 5 }, "end": { "line": 128, "column": 20 } },
						{ "start": { "line": 128, "column": 24 }, "end": { "line": 128, "column": 41 } },
						{ "start": { "line": 128, "column": 45 }, "end": { "line": 128, "column": 81 } },
						{ "start": { "line": 128, "column": 81 }, "end": { "line": 128, "column": 111 } }
					]
				},
				"9": {
					"loc": { "start": { "line": 131, "column": 53 }, "end": { "line": 131, "column": 89 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 131, "column": 53 }, "end": { "line": 131, "column": 66 } },
						{ "start": { "line": 131, "column": 66 }, "end": { "line": 131, "column": 89 } }
					]
				},
				"10": {
					"loc": { "start": { "line": 134, "column": 2 }, "end": { "line": 136, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 134, "column": 2 }, "end": { "line": 136, "column": null } }]
				},
				"11": {
					"loc": { "start": { "line": 141, "column": 1 }, "end": { "line": 144, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 141, "column": 1 }, "end": { "line": 144, "column": null } }]
				},
				"12": {
					"loc": { "start": { "line": 148, "column": 16 }, "end": { "line": 148, "column": 31 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 148, "column": 16 }, "end": { "line": 148, "column": 26 } },
						{ "start": { "line": 148, "column": 30 }, "end": { "line": 148, "column": 31 } }
					]
				},
				"13": {
					"loc": { "start": { "line": 153, "column": 17 }, "end": { "line": 153, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 153, "column": 32 }, "end": { "line": 153, "column": 43 } },
						{ "start": { "line": 153, "column": 43 }, "end": { "line": 153, "column": null } }
					]
				},
				"14": {
					"loc": { "start": { "line": 154, "column": 14 }, "end": { "line": 154, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 154, "column": 32 }, "end": { "line": 154, "column": 64 } },
						{ "start": { "line": 154, "column": 64 }, "end": { "line": 154, "column": null } }
					]
				},
				"15": {
					"loc": { "start": { "line": 180, "column": 1 }, "end": { "line": 182, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 180, "column": 1 }, "end": { "line": 182, "column": null } }]
				},
				"16": {
					"loc": { "start": { "line": 200, "column": 1 }, "end": { "line": 200, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 200, "column": 1 }, "end": { "line": 200, "column": null } }]
				},
				"17": {
					"loc": { "start": { "line": 200, "column": 5 }, "end": { "line": 200, "column": 47 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 200, "column": 5 }, "end": { "line": 200, "column": 17 } },
						{ "start": { "line": 200, "column": 21 }, "end": { "line": 200, "column": 47 } }
					]
				},
				"18": {
					"loc": { "start": { "line": 203, "column": 2 }, "end": { "line": 213, "column": null } },
					"type": "if",
					"locations": [
						{ "start": { "line": 203, "column": 2 }, "end": { "line": 213, "column": null } },
						{ "start": { "line": 207, "column": 9 }, "end": { "line": 213, "column": null } }
					]
				},
				"19": {
					"loc": { "start": { "line": 207, "column": 9 }, "end": { "line": 213, "column": null } },
					"type": "if",
					"locations": [
						{ "start": { "line": 207, "column": 9 }, "end": { "line": 213, "column": null } },
						{ "start": { "line": 211, "column": 9 }, "end": { "line": 213, "column": null } }
					]
				},
				"20": {
					"loc": { "start": { "line": 211, "column": 9 }, "end": { "line": 213, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 211, "column": 9 }, "end": { "line": 213, "column": null } }]
				},
				"21": {
					"loc": { "start": { "line": 221, "column": 1 }, "end": { "line": 221, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 221, "column": 1 }, "end": { "line": 221, "column": null } }]
				},
				"22": {
					"loc": { "start": { "line": 221, "column": 5 }, "end": { "line": 221, "column": 53 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 221, "column": 5 }, "end": { "line": 221, "column": 20 } },
						{ "start": { "line": 221, "column": 24 }, "end": { "line": 221, "column": 53 } }
					]
				},
				"23": {
					"loc": { "start": { "line": 233, "column": 2 }, "end": { "line": 244, "column": null } },
					"type": "if",
					"locations": [
						{ "start": { "line": 233, "column": 2 }, "end": { "line": 244, "column": null } },
						{ "start": { "line": 237, "column": 9 }, "end": { "line": 244, "column": null } }
					]
				},
				"24": {
					"loc": { "start": { "line": 237, "column": 9 }, "end": { "line": 244, "column": null } },
					"type": "if",
					"locations": [
						{ "start": { "line": 237, "column": 9 }, "end": { "line": 244, "column": null } },
						{ "start": { "line": 241, "column": 9 }, "end": { "line": 244, "column": null } }
					]
				},
				"25": {
					"loc": { "start": { "line": 241, "column": 9 }, "end": { "line": 244, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 241, "column": 9 }, "end": { "line": 244, "column": null } }]
				},
				"26": {
					"loc": { "start": { "line": 267, "column": 14 }, "end": { "line": 267, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 267, "column": 26 }, "end": { "line": 267, "column": 56 } },
						{ "start": { "line": 267, "column": 59 }, "end": { "line": 267, "column": null } }
					]
				}
			},
			"s": {
				"0": 151,
				"1": 151,
				"2": 2,
				"3": 149,
				"4": 1362,
				"5": 0,
				"6": 1362,
				"7": 148,
				"8": 187,
				"9": 6,
				"10": 481,
				"11": 201,
				"12": 36,
				"13": 5,
				"14": 1,
				"15": 23,
				"16": 44,
				"17": 66,
				"18": 50,
				"19": 4,
				"20": 3,
				"21": 11,
				"22": 3,
				"23": 34,
				"24": 38,
				"25": 9,
				"26": 2,
				"27": 1,
				"28": 3,
				"29": 2,
				"30": 1,
				"31": 2,
				"32": 1,
				"33": 1,
				"34": 148,
				"35": 187,
				"36": 187,
				"37": 187,
				"38": 187,
				"39": 0,
				"40": 6,
				"41": 6,
				"42": 6,
				"43": 201,
				"44": 0,
				"45": 201,
				"46": 36,
				"47": 13,
				"48": 78,
				"49": 13,
				"50": 13,
				"51": 23,
				"52": 23,
				"53": 0,
				"54": 0,
				"55": 0,
				"56": 23,
				"57": 23,
				"58": 23,
				"59": 23,
				"60": 23,
				"61": 44,
				"62": 66,
				"63": 66,
				"64": 66,
				"65": 54,
				"66": 54,
				"67": 54,
				"68": 3,
				"69": 3,
				"70": 1,
				"71": 2,
				"72": 11,
				"73": 11,
				"74": 11,
				"75": 3,
				"76": 3,
				"77": 3,
				"78": 34,
				"79": 1,
				"80": 33,
				"81": 45,
				"82": 2,
				"83": 2,
				"84": 2,
				"85": 43,
				"86": 35,
				"87": 35,
				"88": 35,
				"89": 8,
				"90": 8,
				"91": 0,
				"92": 33,
				"93": 38,
				"94": 1,
				"95": 37,
				"96": 37,
				"97": 9,
				"98": 9,
				"99": 9,
				"100": 18,
				"101": 18,
				"102": 9,
				"103": 9,
				"104": 9,
				"105": 9,
				"106": 1,
				"107": 1,
				"108": 1,
				"109": 8,
				"110": 8,
				"111": 8,
				"112": 9,
				"113": 9,
				"114": 2,
				"115": 2,
				"116": 2,
				"117": 1,
				"118": 1,
				"119": 1,
				"120": 3,
				"121": 3,
				"122": 3,
				"123": 3,
				"124": 3,
				"125": 3,
				"126": 2,
				"127": 2,
				"128": 2,
				"129": 2,
				"130": 2,
				"131": 2
			},
			"f": {
				"0": 151,
				"1": 1362,
				"2": 148,
				"3": 187,
				"4": 6,
				"5": 201,
				"6": 36,
				"7": 78,
				"8": 23,
				"9": 44,
				"10": 66,
				"11": 54,
				"12": 3,
				"13": 11,
				"14": 3,
				"15": 34,
				"16": 45,
				"17": 38,
				"18": 9,
				"19": 2,
				"20": 1,
				"21": 3,
				"22": 2,
				"23": 2
			},
			"b": {
				"0": [2],
				"1": [0],
				"2": [148, 187, 6, 481, 201, 36, 5, 1, 23, 44, 66, 50, 4, 3, 11, 3, 34, 38, 9, 2, 1, 3, 2, 1, 2, 1],
				"3": [187],
				"4": [187, 187],
				"5": [0],
				"6": [201, 0],
				"7": [13],
				"8": [36, 15, 15, 15],
				"9": [78, 78],
				"10": [13],
				"11": [23],
				"12": [0, 0],
				"13": [4, 19],
				"14": [22, 1],
				"15": [1],
				"16": [1],
				"17": [34, 34],
				"18": [2, 43],
				"19": [35, 8],
				"20": [8],
				"21": [1],
				"22": [38, 38],
				"23": [9, 9],
				"24": [1, 8],
				"25": [8],
				"26": [1, 2]
			}
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/lib/analytics-server.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/lib/analytics-server.ts",
			"statementMap": {
				"0": { "start": { "line": 157, "column": 16 }, "end": { "line": 157, "column": null } },
				"1": { "start": { "line": 85, "column": 22 }, "end": { "line": 85, "column": null } },
				"2": { "start": { "line": 222, "column": 22 }, "end": { "line": 222, "column": 32 } },
				"3": { "start": { "line": 200, "column": 22 }, "end": { "line": 200, "column": 36 } },
				"4": { "start": { "line": 174, "column": 22 }, "end": { "line": 174, "column": 39 } },
				"5": { "start": { "line": 9, "column": 27 }, "end": { "line": 9, "column": null } },
				"6": { "start": { "line": 12, "column": 21 }, "end": { "line": 12, "column": null } },
				"7": { "start": { "line": 19, "column": 1 }, "end": { "line": 22, "column": null } },
				"8": { "start": { "line": 91, "column": 40 }, "end": { "line": 91, "column": null } },
				"9": { "start": { "line": 94, "column": 1 }, "end": { "line": 100, "column": null } },
				"10": { "start": { "line": 95, "column": 2 }, "end": { "line": 95, "column": null } },
				"11": { "start": { "line": 96, "column": 2 }, "end": { "line": 99, "column": null } },
				"12": { "start": { "line": 103, "column": 29 }, "end": { "line": 113, "column": null } },
				"13": { "start": { "line": 105, "column": 31 }, "end": { "line": 112, "column": null } },
				"14": { "start": { "line": 116, "column": 1 }, "end": { "line": 118, "column": null } },
				"15": { "start": { "line": 117, "column": 2 }, "end": { "line": 117, "column": null } },
				"16": { "start": { "line": 121, "column": 1 }, "end": { "line": 121, "column": null } },
				"17": { "start": { "line": 123, "column": 1 }, "end": { "line": 150, "column": null } },
				"18": { "start": { "line": 124, "column": 14 }, "end": { "line": 124, "column": 89 } },
				"19": { "start": { "line": 126, "column": 19 }, "end": { "line": 132, "column": null } },
				"20": { "start": { "line": 134, "column": 2 }, "end": { "line": 141, "column": null } },
				"21": { "start": { "line": 135, "column": 21 }, "end": { "line": 135, "column": null } },
				"22": { "start": { "line": 136, "column": 3 }, "end": { "line": 136, "column": null } },
				"23": { "start": { "line": 137, "column": 3 }, "end": { "line": 140, "column": null } },
				"24": { "start": { "line": 143, "column": 2 }, "end": { "line": 143, "column": null } },
				"25": { "start": { "line": 145, "column": 2 }, "end": { "line": 145, "column": null } },
				"26": { "start": { "line": 146, "column": 2 }, "end": { "line": 149, "column": null } },
				"27": { "start": { "line": 158, "column": 1 }, "end": { "line": 158, "column": null } },
				"28": { "start": { "line": 181, "column": 1 }, "end": { "line": 193, "column": null } },
				"29": { "start": { "line": 205, "column": 1 }, "end": { "line": 215, "column": null } },
				"30": { "start": { "line": 227, "column": 1 }, "end": { "line": 237, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "getConfig",
					"decl": { "start": { "line": 18, "column": 9 }, "end": { "line": 18, "column": null } },
					"loc": { "start": { "line": 18, "column": 9 }, "end": { "line": 23, "column": null } }
				},
				"1": {
					"name": "sendGA4Event",
					"decl": { "start": { "line": 85, "column": 22 }, "end": { "line": 85, "column": null } },
					"loc": { "start": { "line": 88, "column": 16 }, "end": { "line": 151, "column": null } }
				},
				"2": {
					"name": "(anonymous_8)",
					"decl": { "start": { "line": 105, "column": 21 }, "end": { "line": 105, "column": 31 } },
					"loc": { "start": { "line": 105, "column": 31 }, "end": { "line": 112, "column": null } }
				},
				"3": {
					"name": "generateClientId",
					"decl": { "start": { "line": 157, "column": 16 }, "end": { "line": 157, "column": null } },
					"loc": { "start": { "line": 157, "column": 16 }, "end": { "line": 159, "column": null } }
				},
				"4": {
					"name": "trackObfuscation",
					"decl": { "start": { "line": 174, "column": 22 }, "end": { "line": 174, "column": 39 } },
					"loc": { "start": { "line": 180, "column": 1 }, "end": { "line": 195, "column": null } }
				},
				"5": {
					"name": "trackDownload",
					"decl": { "start": { "line": 200, "column": 22 }, "end": { "line": 200, "column": 36 } },
					"loc": { "start": { "line": 204, "column": 1 }, "end": { "line": 217, "column": null } }
				},
				"6": {
					"name": "trackCopy",
					"decl": { "start": { "line": 222, "column": 22 }, "end": { "line": 222, "column": 32 } },
					"loc": { "start": { "line": 226, "column": 1 }, "end": { "line": 239, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 94, "column": 1 }, "end": { "line": 100, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 94, "column": 1 }, "end": { "line": 100, "column": null } }]
				},
				"1": {
					"loc": { "start": { "line": 94, "column": 5 }, "end": { "line": 94, "column": 37 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 94, "column": 5 }, "end": { "line": 94, "column": 24 } },
						{ "start": { "line": 94, "column": 24 }, "end": { "line": 94, "column": 37 } }
					]
				},
				"2": {
					"loc": { "start": { "line": 110, "column": 26 }, "end": { "line": 110, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 110, "column": 26 }, "end": { "line": 110, "column": 64 } },
						{ "start": { "line": 110, "column": 64 }, "end": { "line": 110, "column": null } }
					]
				},
				"3": {
					"loc": { "start": { "line": 116, "column": 1 }, "end": { "line": 118, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 116, "column": 1 }, "end": { "line": 118, "column": null } }]
				},
				"4": {
					"loc": { "start": { "line": 134, "column": 2 }, "end": { "line": 141, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 134, "column": 2 }, "end": { "line": 141, "column": null } }]
				},
				"5": {
					"loc": { "start": { "line": 148, "column": 10 }, "end": { "line": 148, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 148, "column": 35 }, "end": { "line": 148, "column": 48 } },
						{ "start": { "line": 148, "column": 51 }, "end": { "line": 148, "column": null } }
					]
				}
			},
			"s": {
				"0": 104,
				"1": 13,
				"2": 2,
				"3": 2,
				"4": 3,
				"5": 1,
				"6": 1,
				"7": 20,
				"8": 20,
				"9": 20,
				"10": 2,
				"11": 2,
				"12": 18,
				"13": 19,
				"14": 18,
				"15": 2,
				"16": 18,
				"17": 18,
				"18": 18,
				"19": 18,
				"20": 16,
				"21": 1,
				"22": 1,
				"23": 1,
				"24": 15,
				"25": 2,
				"26": 2,
				"27": 104,
				"28": 3,
				"29": 2,
				"30": 2
			},
			"f": { "0": 20, "1": 20, "2": 19, "3": 104, "4": 3, "5": 2, "6": 2 },
			"b": { "0": [2], "1": [20, 19], "2": [19, 18], "3": [2], "4": [1], "5": [2, 0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/lib/obfuscator-simple.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/lib/obfuscator-simple.ts",
			"statementMap": {
				"0": { "start": { "line": 24, "column": 13 }, "end": { "line": 24, "column": null } },
				"1": { "start": { "line": 430, "column": 16 }, "end": { "line": 430, "column": 29 } },
				"2": { "start": { "line": 1, "column": 37 }, "end": { "line": 1, "column": null } },
				"3": { "start": { "line": 39, "column": 2 }, "end": { "line": 89, "column": null } },
				"4": { "start": { "line": 41, "column": 3 }, "end": { "line": 41, "column": null } },
				"5": { "start": { "line": 42, "column": 3 }, "end": { "line": 42, "column": null } },
				"6": { "start": { "line": 45, "column": 23 }, "end": { "line": 45, "column": null } },
				"7": { "start": { "line": 46, "column": 3 }, "end": { "line": 52, "column": null } },
				"8": { "start": { "line": 47, "column": 4 }, "end": { "line": 51, "column": null } },
				"9": { "start": { "line": 54, "column": 24 }, "end": { "line": 54, "column": null } },
				"10": { "start": { "line": 56, "column": 27 }, "end": { "line": 56, "column": null } },
				"11": { "start": { "line": 59, "column": 3 }, "end": { "line": 61, "column": null } },
				"12": { "start": { "line": 60, "column": 4 }, "end": { "line": 60, "column": null } },
				"13": { "start": { "line": 64, "column": 3 }, "end": { "line": 66, "column": null } },
				"14": { "start": { "line": 65, "column": 4 }, "end": { "line": 65, "column": null } },
				"15": { "start": { "line": 69, "column": 3 }, "end": { "line": 71, "column": null } },
				"16": { "start": { "line": 70, "column": 4 }, "end": { "line": 70, "column": null } },
				"17": { "start": { "line": 74, "column": 3 }, "end": { "line": 76, "column": null } },
				"18": { "start": { "line": 75, "column": 4 }, "end": { "line": 75, "column": null } },
				"19": { "start": { "line": 79, "column": 3 }, "end": { "line": 81, "column": null } },
				"20": { "start": { "line": 80, "column": 4 }, "end": { "line": 80, "column": null } },
				"21": { "start": { "line": 83, "column": 3 }, "end": { "line": 83, "column": null } },
				"22": { "start": { "line": 85, "column": 3 }, "end": { "line": 88, "column": null } },
				"23": { "start": { "line": 94, "column": 25 }, "end": { "line": 183, "column": null } },
				"24": { "start": { "line": 186, "column": 28 }, "end": { "line": 186, "column": null } },
				"25": { "start": { "line": 187, "column": 22 }, "end": { "line": 187, "column": null } },
				"26": { "start": { "line": 190, "column": 2 }, "end": { "line": 195, "column": null } },
				"27": { "start": { "line": 191, "column": 16 }, "end": { "line": 191, "column": 24 } },
				"28": { "start": { "line": 192, "column": 3 }, "end": { "line": 194, "column": null } },
				"29": { "start": { "line": 193, "column": 4 }, "end": { "line": 193, "column": null } },
				"30": { "start": { "line": 198, "column": 2 }, "end": { "line": 202, "column": null } },
				"31": { "start": { "line": 199, "column": 3 }, "end": { "line": 201, "column": null } },
				"32": { "start": { "line": 200, "column": 4 }, "end": { "line": 200, "column": null } },
				"33": { "start": { "line": 205, "column": 15 }, "end": { "line": 205, "column": null } },
				"34": { "start": { "line": 206, "column": 2 }, "end": { "line": 210, "column": null } },
				"35": { "start": { "line": 208, "column": 17 }, "end": { "line": 208, "column": null } },
				"36": { "start": { "line": 209, "column": 3 }, "end": { "line": 209, "column": null } },
				"37": { "start": { "line": 212, "column": 2 }, "end": { "line": 212, "column": null } },
				"38": { "start": { "line": 216, "column": 14 }, "end": { "line": 216, "column": null } },
				"39": { "start": { "line": 217, "column": 2 }, "end": { "line": 217, "column": null } },
				"40": { "start": { "line": 218, "column": 2 }, "end": { "line": 218, "column": null } },
				"41": { "start": { "line": 224, "column": 24 }, "end": { "line": 224, "column": null } },
				"42": { "start": { "line": 226, "column": 2 }, "end": { "line": 281, "column": null } },
				"43": { "start": { "line": 227, "column": 15 }, "end": { "line": 227, "column": null } },
				"44": { "start": { "line": 230, "column": 3 }, "end": { "line": 232, "column": null } },
				"45": { "start": { "line": 231, "column": 4 }, "end": { "line": 231, "column": null } },
				"46": { "start": { "line": 237, "column": 3 }, "end": { "line": 243, "column": null } },
				"47": { "start": { "line": 238, "column": 4 }, "end": { "line": 238, "column": null } },
				"48": { "start": { "line": 239, "column": 10 }, "end": { "line": 243, "column": null } },
				"49": { "start": { "line": 240, "column": 4 }, "end": { "line": 240, "column": null } },
				"50": { "start": { "line": 242, "column": 4 }, "end": { "line": 242, "column": null } },
				"51": { "start": { "line": 245, "column": 3 }, "end": { "line": 247, "column": null } },
				"52": { "start": { "line": 246, "column": 4 }, "end": { "line": 246, "column": null } },
				"53": { "start": { "line": 251, "column": 20 }, "end": { "line": 251, "column": null } },
				"54": { "start": { "line": 253, "column": 3 }, "end": { "line": 280, "column": null } },
				"55": { "start": { "line": 256, "column": 18 }, "end": { "line": 256, "column": null } },
				"56": { "start": { "line": 257, "column": 23 }, "end": { "line": 257, "column": null } },
				"57": { "start": { "line": 258, "column": 5 }, "end": { "line": 258, "column": null } },
				"58": { "start": { "line": 262, "column": 24 }, "end": { "line": 262, "column": 59 } },
				"59": { "start": { "line": 263, "column": 5 }, "end": { "line": 263, "column": null } },
				"60": { "start": { "line": 268, "column": 5 }, "end": { "line": 276, "column": null } },
				"61": { "start": { "line": 270, "column": 21 }, "end": { "line": 270, "column": 58 } },
				"62": { "start": { "line": 271, "column": 6 }, "end": { "line": 271, "column": null } },
				"63": { "start": { "line": 274, "column": 25 }, "end": { "line": 274, "column": 74 } },
				"64": { "start": { "line": 275, "column": 6 }, "end": { "line": 275, "column": null } },
				"65": { "start": { "line": 279, "column": 5 }, "end": { "line": 279, "column": null } },
				"66": { "start": { "line": 286, "column": 26 }, "end": { "line": 290, "column": null } },
				"67": { "start": { "line": 287, "column": 3 }, "end": { "line": 287, "column": null } },
				"68": { "start": { "line": 287, "column": 31 }, "end": { "line": 287, "column": null } },
				"69": { "start": { "line": 288, "column": 3 }, "end": { "line": 288, "column": null } },
				"70": { "start": { "line": 288, "column": 29 }, "end": { "line": 288, "column": null } },
				"71": { "start": { "line": 289, "column": 3 }, "end": { "line": 289, "column": null } },
				"72": { "start": { "line": 294, "column": 20 }, "end": { "line": 294, "column": null } },
				"73": { "start": { "line": 295, "column": 2 }, "end": { "line": 303, "column": null } },
				"74": { "start": { "line": 296, "column": 3 }, "end": { "line": 298, "column": null } },
				"75": { "start": { "line": 297, "column": 4 }, "end": { "line": 297, "column": null } },
				"76": { "start": { "line": 300, "column": 28 }, "end": { "line": 300, "column": null } },
				"77": { "start": { "line": 301, "column": 18 }, "end": { "line": 301, "column": 87 } },
				"78": { "start": { "line": 302, "column": 3 }, "end": { "line": 302, "column": null } },
				"79": { "start": { "line": 307, "column": 23 }, "end": { "line": 307, "column": null } },
				"80": { "start": { "line": 308, "column": 2 }, "end": { "line": 315, "column": null } },
				"81": { "start": { "line": 309, "column": 3 }, "end": { "line": 311, "column": null } },
				"82": { "start": { "line": 310, "column": 4 }, "end": { "line": 310, "column": null } },
				"83": { "start": { "line": 313, "column": 18 }, "end": { "line": 313, "column": null } },
				"84": { "start": { "line": 314, "column": 3 }, "end": { "line": 314, "column": null } },
				"85": { "start": { "line": 319, "column": 23 }, "end": { "line": 319, "column": null } },
				"86": { "start": { "line": 320, "column": 2 }, "end": { "line": 327, "column": null } },
				"87": { "start": { "line": 321, "column": 3 }, "end": { "line": 323, "column": null } },
				"88": { "start": { "line": 322, "column": 4 }, "end": { "line": 322, "column": null } },
				"89": { "start": { "line": 325, "column": 18 }, "end": { "line": 325, "column": null } },
				"90": { "start": { "line": 326, "column": 3 }, "end": { "line": 326, "column": null } },
				"91": { "start": { "line": 329, "column": 2 }, "end": { "line": 329, "column": null } },
				"92": { "start": { "line": 338, "column": 24 }, "end": { "line": 338, "column": null } },
				"93": { "start": { "line": 340, "column": 2 }, "end": { "line": 395, "column": null } },
				"94": { "start": { "line": 342, "column": 17 }, "end": { "line": 342, "column": 25 } },
				"95": { "start": { "line": 343, "column": 19 }, "end": { "line": 343, "column": null } },
				"96": { "start": { "line": 346, "column": 3 }, "end": { "line": 348, "column": null } },
				"97": { "start": { "line": 347, "column": 4 }, "end": { "line": 347, "column": null } },
				"98": { "start": { "line": 351, "column": 27 }, "end": { "line": 351, "column": 29 } },
				"99": { "start": { "line": 352, "column": 3 }, "end": { "line": 391, "column": null } },
				"100": { "start": { "line": 352, "column": 16 }, "end": { "line": 352, "column": 19 } },
				"101": { "start": { "line": 353, "column": 17 }, "end": { "line": 353, "column": 27 } },
				"102": { "start": { "line": 356, "column": 4 }, "end": { "line": 388, "column": null } },
				"103": { "start": { "line": 357, "column": 22 }, "end": { "line": 357, "column": 36 } },
				"104": { "start": { "line": 358, "column": 5 }, "end": { "line": 387, "column": null } },
				"105": { "start": { "line": 360, "column": 7 }, "end": { "line": 360, "column": 23 } },
				"106": { "start": { "line": 361, "column": 7 }, "end": { "line": 361, "column": null } },
				"107": { "start": { "line": 362, "column": 7 }, "end": { "line": 362, "column": null } },
				"108": { "start": { "line": 364, "column": 7 }, "end": { "line": 364, "column": 22 } },
				"109": { "start": { "line": 365, "column": 7 }, "end": { "line": 365, "column": null } },
				"110": { "start": { "line": 366, "column": 7 }, "end": { "line": 366, "column": null } },
				"111": { "start": { "line": 368, "column": 7 }, "end": { "line": 368, "column": 23 } },
				"112": { "start": { "line": 369, "column": 7 }, "end": { "line": 369, "column": null } },
				"113": { "start": { "line": 370, "column": 7 }, "end": { "line": 370, "column": null } },
				"114": { "start": { "line": 372, "column": 7 }, "end": { "line": 372, "column": 23 } },
				"115": { "start": { "line": 373, "column": 7 }, "end": { "line": 373, "column": null } },
				"116": { "start": { "line": 374, "column": 7 }, "end": { "line": 374, "column": null } },
				"117": { "start": { "line": 376, "column": 7 }, "end": { "line": 376, "column": 23 } },
				"118": { "start": { "line": 377, "column": 7 }, "end": { "line": 377, "column": null } },
				"119": { "start": { "line": 378, "column": 7 }, "end": { "line": 378, "column": null } },
				"120": { "start": { "line": 380, "column": 7 }, "end": { "line": 380, "column": 23 } },
				"121": { "start": { "line": 381, "column": 7 }, "end": { "line": 381, "column": null } },
				"122": { "start": { "line": 382, "column": 7 }, "end": { "line": 382, "column": null } },
				"123": { "start": { "line": 385, "column": 7 }, "end": { "line": 385, "column": null } },
				"124": { "start": { "line": 386, "column": 7 }, "end": { "line": 386, "column": null } },
				"125": { "start": { "line": 390, "column": 4 }, "end": { "line": 390, "column": null } },
				"126": { "start": { "line": 394, "column": 3 }, "end": { "line": 394, "column": null } },
				"127": { "start": { "line": 400, "column": 2 }, "end": { "line": 400, "column": 50 } },
				"128": { "start": { "line": 401, "column": 2 }, "end": { "line": 401, "column": 40 } },
				"129": { "start": { "line": 404, "column": 2 }, "end": { "line": 404, "column": 41 } },
				"130": { "start": { "line": 405, "column": 2 }, "end": { "line": 405, "column": 39 } },
				"131": { "start": { "line": 408, "column": 2 }, "end": { "line": 411, "column": null } },
				"132": { "start": { "line": 410, "column": 16 }, "end": { "line": 410, "column": null } },
				"133": { "start": { "line": 414, "column": 2 }, "end": { "line": 417, "column": null } },
				"134": { "start": { "line": 416, "column": 19 }, "end": { "line": 416, "column": null } },
				"135": { "start": { "line": 419, "column": 2 }, "end": { "line": 419, "column": null } },
				"136": { "start": { "line": 25, "column": 9 }, "end": { "line": 25, "column": null } },
				"137": { "start": { "line": 26, "column": 9 }, "end": { "line": 26, "column": null } },
				"138": { "start": { "line": 433, "column": 25 }, "end": { "line": 433, "column": null } },
				"139": { "start": { "line": 436, "column": 44 }, "end": { "line": 443, "column": null } },
				"140": { "start": { "line": 446, "column": 42 }, "end": { "line": 451, "column": null } },
				"141": { "start": { "line": 453, "column": 20 }, "end": { "line": 453, "column": null } },
				"142": { "start": { "line": 454, "column": 1 }, "end": { "line": 454, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "(anonymous_3)",
					"decl": { "start": { "line": 28, "column": 1 }, "end": { "line": 28, "column": null } },
					"loc": { "start": { "line": 38, "column": 22 }, "end": { "line": 90, "column": null } }
				},
				"1": {
					"name": "(anonymous_4)",
					"decl": { "start": { "line": 92, "column": 9 }, "end": { "line": 92, "column": 26 } },
					"loc": { "start": { "line": 92, "column": 48 }, "end": { "line": 213, "column": null } }
				},
				"2": {
					"name": "(anonymous_5)",
					"decl": { "start": { "line": 198, "column": 22 }, "end": { "line": 198, "column": null } },
					"loc": { "start": { "line": 198, "column": 22 }, "end": { "line": 202, "column": null } }
				},
				"3": {
					"name": "(anonymous_6)",
					"decl": { "start": { "line": 206, "column": 23 }, "end": { "line": 206, "column": 24 } },
					"loc": { "start": { "line": 206, "column": 37 }, "end": { "line": 210, "column": null } }
				},
				"4": {
					"name": "(anonymous_7)",
					"decl": { "start": { "line": 215, "column": 9 }, "end": { "line": 215, "column": 39 } },
					"loc": { "start": { "line": 215, "column": 39 }, "end": { "line": 219, "column": null } }
				},
				"5": {
					"name": "(anonymous_8)",
					"decl": { "start": { "line": 221, "column": 9 }, "end": { "line": 221, "column": 23 } },
					"loc": { "start": { "line": 221, "column": 70 }, "end": { "line": 282, "column": null } }
				},
				"6": {
					"name": "(anonymous_9)",
					"decl": { "start": { "line": 226, "column": 37 }, "end": { "line": 226, "column": null } },
					"loc": { "start": { "line": 226, "column": 37 }, "end": { "line": 281, "column": null } }
				},
				"7": {
					"name": "(anonymous_10)",
					"decl": { "start": { "line": 284, "column": 9 }, "end": { "line": 284, "column": 30 } },
					"loc": { "start": { "line": 284, "column": 77 }, "end": { "line": 330, "column": null } }
				},
				"8": {
					"name": "(anonymous_11)",
					"decl": { "start": { "line": 286, "column": 26 }, "end": { "line": 286, "column": null } },
					"loc": { "start": { "line": 286, "column": 26 }, "end": { "line": 290, "column": null } }
				},
				"9": {
					"name": "(anonymous_12)",
					"decl": { "start": { "line": 295, "column": 33 }, "end": { "line": 295, "column": 34 } },
					"loc": { "start": { "line": 295, "column": 41 }, "end": { "line": 303, "column": null } }
				},
				"10": {
					"name": "(anonymous_13)",
					"decl": { "start": { "line": 308, "column": 36 }, "end": { "line": 308, "column": 37 } },
					"loc": { "start": { "line": 308, "column": 44 }, "end": { "line": 315, "column": null } }
				},
				"11": {
					"name": "(anonymous_14)",
					"decl": { "start": { "line": 320, "column": 36 }, "end": { "line": 320, "column": 37 } },
					"loc": { "start": { "line": 320, "column": 44 }, "end": { "line": 327, "column": null } }
				},
				"12": {
					"name": "(anonymous_15)",
					"decl": { "start": { "line": 332, "column": 9 }, "end": { "line": 332, "column": 23 } },
					"loc": { "start": { "line": 332, "column": 45 }, "end": { "line": 396, "column": null } }
				},
				"13": {
					"name": "(anonymous_16)",
					"decl": { "start": { "line": 340, "column": 37 }, "end": { "line": 340, "column": null } },
					"loc": { "start": { "line": 340, "column": 37 }, "end": { "line": 395, "column": null } }
				},
				"14": {
					"name": "(anonymous_17)",
					"decl": { "start": { "line": 398, "column": 9 }, "end": { "line": 398, "column": 16 } },
					"loc": { "start": { "line": 398, "column": 38 }, "end": { "line": 420, "column": null } }
				},
				"15": {
					"name": "(anonymous_18)",
					"decl": { "start": { "line": 410, "column": 8 }, "end": { "line": 410, "column": 16 } },
					"loc": { "start": { "line": 410, "column": 16 }, "end": { "line": 410, "column": null } }
				},
				"16": {
					"name": "(anonymous_19)",
					"decl": { "start": { "line": 416, "column": 11 }, "end": { "line": 416, "column": 19 } },
					"loc": { "start": { "line": 416, "column": 19 }, "end": { "line": 416, "column": null } }
				},
				"17": {
					"name": "obfuscateLua",
					"decl": { "start": { "line": 430, "column": 16 }, "end": { "line": 430, "column": 29 } },
					"loc": { "start": { "line": 430, "column": 71 }, "end": { "line": 455, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 30, "column": 2 }, "end": { "line": 37, "column": 3 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 30, "column": 32 }, "end": { "line": 37, "column": 3 } }]
				},
				"1": {
					"loc": { "start": { "line": 46, "column": 3 }, "end": { "line": 52, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 46, "column": 3 }, "end": { "line": 52, "column": null } }]
				},
				"2": {
					"loc": { "start": { "line": 49, "column": 12 }, "end": { "line": 49, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 49, "column": 12 }, "end": { "line": 49, "column": 29 } },
						{ "start": { "line": 49, "column": 33 }, "end": { "line": 49, "column": null } }
					]
				},
				"3": {
					"loc": { "start": { "line": 56, "column": 27 }, "end": { "line": 56, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 56, "column": 27 }, "end": { "line": 56, "column": 50 } },
						{ "start": { "line": 56, "column": 54 }, "end": { "line": 56, "column": null } }
					]
				},
				"4": {
					"loc": { "start": { "line": 59, "column": 3 }, "end": { "line": 61, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 59, "column": 3 }, "end": { "line": 61, "column": null } }]
				},
				"5": {
					"loc": { "start": { "line": 64, "column": 3 }, "end": { "line": 66, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 64, "column": 3 }, "end": { "line": 66, "column": null } }]
				},
				"6": {
					"loc": { "start": { "line": 69, "column": 3 }, "end": { "line": 71, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 69, "column": 3 }, "end": { "line": 71, "column": null } }]
				},
				"7": {
					"loc": { "start": { "line": 74, "column": 3 }, "end": { "line": 76, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 74, "column": 3 }, "end": { "line": 76, "column": null } }]
				},
				"8": {
					"loc": { "start": { "line": 79, "column": 3 }, "end": { "line": 81, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 79, "column": 3 }, "end": { "line": 81, "column": null } }]
				},
				"9": {
					"loc": { "start": { "line": 87, "column": 11 }, "end": { "line": 87, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 87, "column": 11 }, "end": { "line": 87, "column": 24 } },
						{ "start": { "line": 87, "column": 28 }, "end": { "line": 87, "column": null } }
					]
				},
				"10": {
					"loc": { "start": { "line": 192, "column": 3 }, "end": { "line": 194, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 192, "column": 3 }, "end": { "line": 194, "column": null } }]
				},
				"11": {
					"loc": { "start": { "line": 199, "column": 3 }, "end": { "line": 201, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 199, "column": 3 }, "end": { "line": 201, "column": null } }]
				},
				"12": {
					"loc": { "start": { "line": 230, "column": 3 }, "end": { "line": 232, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 230, "column": 3 }, "end": { "line": 232, "column": null } }]
				},
				"13": {
					"loc": { "start": { "line": 230, "column": 7 }, "end": { "line": 230, "column": 29 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 230, "column": 7 }, "end": { "line": 230, "column": 19 } },
						{ "start": { "line": 230, "column": 19 }, "end": { "line": 230, "column": 29 } }
					]
				},
				"14": {
					"loc": { "start": { "line": 237, "column": 3 }, "end": { "line": 243, "column": null } },
					"type": "if",
					"locations": [
						{ "start": { "line": 237, "column": 3 }, "end": { "line": 243, "column": null } },
						{ "start": { "line": 239, "column": 10 }, "end": { "line": 243, "column": null } }
					]
				},
				"15": {
					"loc": { "start": { "line": 239, "column": 10 }, "end": { "line": 243, "column": null } },
					"type": "if",
					"locations": [
						{ "start": { "line": 239, "column": 10 }, "end": { "line": 243, "column": null } },
						{ "start": { "line": 241, "column": 10 }, "end": { "line": 243, "column": null } }
					]
				},
				"16": {
					"loc": { "start": { "line": 245, "column": 3 }, "end": { "line": 247, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 245, "column": 3 }, "end": { "line": 247, "column": null } }]
				},
				"17": {
					"loc": { "start": { "line": 253, "column": 3 }, "end": { "line": 280, "column": null } },
					"type": "switch",
					"locations": [
						{ "start": { "line": 254, "column": 4 }, "end": { "line": 259, "column": null } },
						{ "start": { "line": 260, "column": 4 }, "end": { "line": 264, "column": null } },
						{ "start": { "line": 265, "column": 4 }, "end": { "line": 277, "column": null } },
						{ "start": { "line": 278, "column": 4 }, "end": { "line": 279, "column": null } }
					]
				},
				"18": {
					"loc": { "start": { "line": 268, "column": 5 }, "end": { "line": 276, "column": null } },
					"type": "if",
					"locations": [
						{ "start": { "line": 268, "column": 5 }, "end": { "line": 276, "column": null } },
						{ "start": { "line": 272, "column": 12 }, "end": { "line": 276, "column": null } }
					]
				},
				"19": {
					"loc": { "start": { "line": 287, "column": 3 }, "end": { "line": 287, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 287, "column": 3 }, "end": { "line": 287, "column": null } }]
				},
				"20": {
					"loc": { "start": { "line": 288, "column": 3 }, "end": { "line": 288, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 288, "column": 3 }, "end": { "line": 288, "column": null } }]
				},
				"21": {
					"loc": { "start": { "line": 296, "column": 3 }, "end": { "line": 298, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 296, "column": 3 }, "end": { "line": 298, "column": null } }]
				},
				"22": {
					"loc": { "start": { "line": 309, "column": 3 }, "end": { "line": 311, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 309, "column": 3 }, "end": { "line": 311, "column": null } }]
				},
				"23": {
					"loc": { "start": { "line": 321, "column": 3 }, "end": { "line": 323, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 321, "column": 3 }, "end": { "line": 323, "column": null } }]
				},
				"24": {
					"loc": { "start": { "line": 346, "column": 3 }, "end": { "line": 348, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 346, "column": 3 }, "end": { "line": 348, "column": null } }]
				},
				"25": {
					"loc": { "start": { "line": 356, "column": 4 }, "end": { "line": 388, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 356, "column": 4 }, "end": { "line": 388, "column": null } }]
				},
				"26": {
					"loc": { "start": { "line": 356, "column": 8 }, "end": { "line": 356, "column": 47 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 356, "column": 8 }, "end": { "line": 356, "column": 25 } },
						{ "start": { "line": 356, "column": 25 }, "end": { "line": 356, "column": 47 } }
					]
				},
				"27": {
					"loc": { "start": { "line": 358, "column": 5 }, "end": { "line": 387, "column": null } },
					"type": "switch",
					"locations": [
						{ "start": { "line": 359, "column": 6 }, "end": { "line": 362, "column": null } },
						{ "start": { "line": 363, "column": 6 }, "end": { "line": 366, "column": null } },
						{ "start": { "line": 367, "column": 6 }, "end": { "line": 370, "column": null } },
						{ "start": { "line": 371, "column": 6 }, "end": { "line": 374, "column": null } },
						{ "start": { "line": 375, "column": 6 }, "end": { "line": 378, "column": null } },
						{ "start": { "line": 379, "column": 6 }, "end": { "line": 382, "column": null } },
						{ "start": { "line": 383, "column": 6 }, "end": { "line": 386, "column": null } }
					]
				},
				"28": {
					"loc": { "start": { "line": 433, "column": 25 }, "end": { "line": 433, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 433, "column": 25 }, "end": { "line": 433, "column": 53 } },
						{ "start": { "line": 433, "column": 53 }, "end": { "line": 433, "column": null } }
					]
				}
			},
			"s": {
				"0": 6,
				"1": 70,
				"2": 2,
				"3": 78,
				"4": 78,
				"5": 78,
				"6": 78,
				"7": 78,
				"8": 3,
				"9": 75,
				"10": 75,
				"11": 75,
				"12": 37,
				"13": 75,
				"14": 33,
				"15": 75,
				"16": 29,
				"17": 75,
				"18": 43,
				"19": 75,
				"20": 43,
				"21": 75,
				"22": 0,
				"23": 43,
				"24": 43,
				"25": 43,
				"26": 43,
				"27": 296,
				"28": 296,
				"29": 85,
				"30": 43,
				"31": 68,
				"32": 68,
				"33": 43,
				"34": 43,
				"35": 68,
				"36": 68,
				"37": 43,
				"38": 68,
				"39": 68,
				"40": 68,
				"41": 37,
				"42": 37,
				"43": 74,
				"44": 74,
				"45": 10,
				"46": 64,
				"47": 25,
				"48": 39,
				"49": 1,
				"50": 38,
				"51": 64,
				"52": 22,
				"53": 42,
				"54": 42,
				"55": 16,
				"56": 16,
				"57": 16,
				"58": 16,
				"59": 16,
				"60": 10,
				"61": 10,
				"62": 10,
				"63": 0,
				"64": 0,
				"65": 0,
				"66": 33,
				"67": 39,
				"68": 16,
				"69": 23,
				"70": 1,
				"71": 22,
				"72": 33,
				"73": 33,
				"74": 34,
				"75": 6,
				"76": 28,
				"77": 28,
				"78": 28,
				"79": 33,
				"80": 33,
				"81": 3,
				"82": 0,
				"83": 3,
				"84": 3,
				"85": 33,
				"86": 33,
				"87": 2,
				"88": 0,
				"89": 2,
				"90": 2,
				"91": 33,
				"92": 29,
				"93": 29,
				"94": 21,
				"95": 21,
				"96": 21,
				"97": 0,
				"98": 21,
				"99": 21,
				"100": 21,
				"101": 85,
				"102": 85,
				"103": 0,
				"104": 0,
				"105": 0,
				"106": 0,
				"107": 0,
				"108": 0,
				"109": 0,
				"110": 0,
				"111": 0,
				"112": 0,
				"113": 0,
				"114": 0,
				"115": 0,
				"116": 0,
				"117": 0,
				"118": 0,
				"119": 0,
				"120": 0,
				"121": 0,
				"122": 0,
				"123": 0,
				"124": 0,
				"125": 85,
				"126": 21,
				"127": 43,
				"128": 43,
				"129": 43,
				"130": 43,
				"131": 43,
				"132": 63,
				"133": 43,
				"134": 63,
				"135": 43,
				"136": 75,
				"137": 75,
				"138": 70,
				"139": 70,
				"140": 70,
				"141": 70,
				"142": 70
			},
			"f": {
				"0": 78,
				"1": 43,
				"2": 68,
				"3": 68,
				"4": 68,
				"5": 37,
				"6": 74,
				"7": 33,
				"8": 39,
				"9": 34,
				"10": 3,
				"11": 2,
				"12": 29,
				"13": 21,
				"14": 43,
				"15": 63,
				"16": 63,
				"17": 70
			},
			"b": {
				"0": [4],
				"1": [3],
				"2": [3, 0],
				"3": [75, 0],
				"4": [37],
				"5": [33],
				"6": [29],
				"7": [43],
				"8": [43],
				"9": [0, 0],
				"10": [85],
				"11": [68],
				"12": [10],
				"13": [74, 74],
				"14": [25, 39],
				"15": [1, 38],
				"16": [22],
				"17": [16, 16, 10, 0],
				"18": [10, 0],
				"19": [16],
				"20": [1],
				"21": [6],
				"22": [0],
				"23": [0],
				"24": [0],
				"25": [0],
				"26": [85, 0],
				"27": [0, 0, 0, 0, 0, 0, 0],
				"28": [70, 10]
			}
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/lib/analytics-client.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/lib/analytics-client.ts",
			"statementMap": {
				"0": { "start": { "line": 14, "column": 16 }, "end": { "line": 14, "column": null } },
				"1": { "start": { "line": 122, "column": 22 }, "end": { "line": 122, "column": 32 } },
				"2": { "start": { "line": 108, "column": 22 }, "end": { "line": 108, "column": 36 } },
				"3": { "start": { "line": 154, "column": 22 }, "end": { "line": 154, "column": 33 } },
				"4": { "start": { "line": 52, "column": 22 }, "end": { "line": 52, "column": 33 } },
				"5": { "start": { "line": 88, "column": 22 }, "end": { "line": 88, "column": 39 } },
				"6": { "start": { "line": 136, "column": 22 }, "end": { "line": 136, "column": 42 } },
				"7": { "start": { "line": 15, "column": 1 }, "end": { "line": 17, "column": null } },
				"8": { "start": { "line": 16, "column": 2 }, "end": { "line": 16, "column": 13 } },
				"9": { "start": { "line": 19, "column": 21 }, "end": { "line": 19, "column": null } },
				"10": { "start": { "line": 22, "column": 16 }, "end": { "line": 22, "column": null } },
				"11": { "start": { "line": 25, "column": 1 }, "end": { "line": 28, "column": null } },
				"12": { "start": { "line": 26, "column": 2 }, "end": { "line": 26, "column": null } },
				"13": { "start": { "line": 27, "column": 2 }, "end": { "line": 27, "column": null } },
				"14": { "start": { "line": 30, "column": 1 }, "end": { "line": 30, "column": null } },
				"15": { "start": { "line": 53, "column": 1 }, "end": { "line": 81, "column": null } },
				"16": { "start": { "line": 54, "column": 19 }, "end": { "line": 54, "column": null } },
				"17": { "start": { "line": 56, "column": 19 }, "end": { "line": 66, "column": null } },
				"18": { "start": { "line": 68, "column": 2 }, "end": { "line": 72, "column": null } },
				"19": { "start": { "line": 69, "column": 17 }, "end": { "line": 69, "column": null } },
				"20": { "start": { "line": 70, "column": 3 }, "end": { "line": 70, "column": null } },
				"21": { "start": { "line": 71, "column": 3 }, "end": { "line": 71, "column": null } },
				"22": { "start": { "line": 74, "column": 2 }, "end": { "line": 74, "column": null } },
				"23": { "start": { "line": 76, "column": 2 }, "end": { "line": 76, "column": null } },
				"24": { "start": { "line": 77, "column": 2 }, "end": { "line": 80, "column": null } },
				"25": { "start": { "line": 93, "column": 1 }, "end": { "line": 102, "column": null } },
				"26": { "start": { "line": 109, "column": 1 }, "end": { "line": 116, "column": null } },
				"27": { "start": { "line": 123, "column": 1 }, "end": { "line": 130, "column": null } },
				"28": { "start": { "line": 140, "column": 1 }, "end": { "line": 148, "column": null } },
				"29": { "start": { "line": 155, "column": 1 }, "end": { "line": 163, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "getClientId",
					"decl": { "start": { "line": 14, "column": 16 }, "end": { "line": 14, "column": null } },
					"loc": { "start": { "line": 14, "column": 16 }, "end": { "line": 31, "column": null } }
				},
				"1": {
					"name": "trackEvent",
					"decl": { "start": { "line": 52, "column": 22 }, "end": { "line": 52, "column": 33 } },
					"loc": { "start": { "line": 52, "column": 68 }, "end": { "line": 82, "column": null } }
				},
				"2": {
					"name": "trackObfuscation",
					"decl": { "start": { "line": 88, "column": 22 }, "end": { "line": 88, "column": 39 } },
					"loc": { "start": { "line": 92, "column": 1 }, "end": { "line": 103, "column": null } }
				},
				"3": {
					"name": "trackDownload",
					"decl": { "start": { "line": 108, "column": 22 }, "end": { "line": 108, "column": 36 } },
					"loc": { "start": { "line": 108, "column": 52 }, "end": { "line": 117, "column": null } }
				},
				"4": {
					"name": "trackCopy",
					"decl": { "start": { "line": 122, "column": 22 }, "end": { "line": 122, "column": 32 } },
					"loc": { "start": { "line": 122, "column": 48 }, "end": { "line": 131, "column": null } }
				},
				"5": {
					"name": "trackSettingsChange",
					"decl": { "start": { "line": 136, "column": 22 }, "end": { "line": 136, "column": 42 } },
					"loc": { "start": { "line": 139, "column": 1 }, "end": { "line": 149, "column": null } }
				},
				"6": {
					"name": "trackError",
					"decl": { "start": { "line": 154, "column": 22 }, "end": { "line": 154, "column": 33 } },
					"loc": { "start": { "line": 154, "column": 85 }, "end": { "line": 164, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 15, "column": 1 }, "end": { "line": 17, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 15, "column": 1 }, "end": { "line": 17, "column": null } }]
				},
				"1": {
					"loc": { "start": { "line": 25, "column": 1 }, "end": { "line": 28, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 25, "column": 1 }, "end": { "line": 28, "column": null } }]
				},
				"2": {
					"loc": { "start": { "line": 68, "column": 2 }, "end": { "line": 72, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 68, "column": 2 }, "end": { "line": 72, "column": null } }]
				},
				"3": {
					"loc": { "start": { "line": 79, "column": 10 }, "end": { "line": 79, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 79, "column": 35 }, "end": { "line": 79, "column": 48 } },
						{ "start": { "line": 79, "column": 51 }, "end": { "line": 79, "column": null } }
					]
				}
			},
			"s": {
				"0": 8,
				"1": 2,
				"2": 2,
				"3": 3,
				"4": 7,
				"5": 7,
				"6": 4,
				"7": 33,
				"8": 1,
				"9": 32,
				"10": 32,
				"11": 32,
				"12": 11,
				"13": 11,
				"14": 32,
				"15": 25,
				"16": 25,
				"17": 25,
				"18": 23,
				"19": 1,
				"20": 1,
				"21": 1,
				"22": 22,
				"23": 2,
				"24": 2,
				"25": 7,
				"26": 2,
				"27": 2,
				"28": 4,
				"29": 3
			},
			"f": { "0": 33, "1": 25, "2": 7, "3": 2, "4": 2, "5": 4, "6": 3 },
			"b": { "0": [1], "1": [11], "2": [1], "3": [2, 0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/lib/utils.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/lib/utils.ts",
			"statementMap": {
				"0": { "start": { "line": 4, "column": 16 }, "end": { "line": 4, "column": 19 } },
				"1": { "start": { "line": 1, "column": 38 }, "end": { "line": 1, "column": null } },
				"2": { "start": { "line": 2, "column": 24 }, "end": { "line": 2, "column": null } },
				"3": { "start": { "line": 5, "column": 1 }, "end": { "line": 5, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "cn",
					"decl": { "start": { "line": 4, "column": 16 }, "end": { "line": 4, "column": 19 } },
					"loc": { "start": { "line": 4, "column": 42 }, "end": { "line": 6, "column": null } }
				}
			},
			"branchMap": {},
			"s": { "0": 19, "1": 1, "2": 1, "3": 19 },
			"f": { "0": 19 },
			"b": {}
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/components/GoogleAnalytics.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/components/GoogleAnalytics.tsx",
			"statementMap": {
				"0": { "start": { "line": 13, "column": 16 }, "end": { "line": 13, "column": null } },
				"1": { "start": { "line": 1, "column": 19 }, "end": { "line": 1, "column": null } },
				"2": { "start": { "line": 3, "column": 26 }, "end": { "line": 3, "column": 67 } },
				"3": { "start": { "line": 15, "column": 1 }, "end": { "line": 18, "column": null } },
				"4": { "start": { "line": 16, "column": 2 }, "end": { "line": 16, "column": null } },
				"5": { "start": { "line": 17, "column": 2 }, "end": { "line": 17, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "GoogleAnalytics",
					"decl": { "start": { "line": 13, "column": 16 }, "end": { "line": 13, "column": null } },
					"loc": { "start": { "line": 13, "column": 16 }, "end": { "line": 38, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 15, "column": 1 }, "end": { "line": 18, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 15, "column": 1 }, "end": { "line": 18, "column": null } }]
				}
			},
			"s": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 },
			"f": { "0": 0 },
			"b": { "0": [0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/app/api/analytics/track/route.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/app/api/analytics/track/route.ts",
			"statementMap": {
				"0": { "start": { "line": 84, "column": 22 }, "end": { "line": 84, "column": 30 } },
				"1": { "start": { "line": 44, "column": 22 }, "end": { "line": 44, "column": 27 } },
				"2": { "start": { "line": 9, "column": 42 }, "end": { "line": 9, "column": null } },
				"3": { "start": { "line": 10, "column": 44 }, "end": { "line": 10, "column": null } },
				"4": { "start": { "line": 45, "column": 1 }, "end": { "line": 78, "column": null } },
				"5": { "start": { "line": 47, "column": 34 }, "end": { "line": 47, "column": null } },
				"6": { "start": { "line": 50, "column": 2 }, "end": { "line": 52, "column": null } },
				"7": { "start": { "line": 51, "column": 3 }, "end": { "line": 51, "column": null } },
				"8": { "start": { "line": 54, "column": 2 }, "end": { "line": 56, "column": null } },
				"9": { "start": { "line": 55, "column": 3 }, "end": { "line": 55, "column": null } },
				"10": { "start": { "line": 59, "column": 2 }, "end": { "line": 63, "column": null } },
				"11": { "start": { "line": 60, "column": 3 }, "end": { "line": 62, "column": null } },
				"12": { "start": { "line": 61, "column": 4 }, "end": { "line": 61, "column": null } },
				"13": { "start": { "line": 66, "column": 17 }, "end": { "line": 66, "column": null } },
				"14": { "start": { "line": 68, "column": 2 }, "end": { "line": 71, "column": null } },
				"15": { "start": { "line": 69, "column": 3 }, "end": { "line": 69, "column": null } },
				"16": { "start": { "line": 70, "column": 3 }, "end": { "line": 70, "column": null } },
				"17": { "start": { "line": 74, "column": 2 }, "end": { "line": 74, "column": null } },
				"18": { "start": { "line": 76, "column": 2 }, "end": { "line": 76, "column": null } },
				"19": { "start": { "line": 77, "column": 2 }, "end": { "line": 77, "column": null } },
				"20": { "start": { "line": 85, "column": 1 }, "end": { "line": 91, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "POST",
					"decl": { "start": { "line": 44, "column": 22 }, "end": { "line": 44, "column": 27 } },
					"loc": { "start": { "line": 44, "column": 47 }, "end": { "line": 79, "column": null } }
				},
				"1": {
					"name": "OPTIONS",
					"decl": { "start": { "line": 84, "column": 22 }, "end": { "line": 84, "column": 30 } },
					"loc": { "start": { "line": 84, "column": 50 }, "end": { "line": 92, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 50, "column": 2 }, "end": { "line": 52, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 50, "column": 2 }, "end": { "line": 52, "column": null } }]
				},
				"1": {
					"loc": { "start": { "line": 54, "column": 2 }, "end": { "line": 56, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 54, "column": 2 }, "end": { "line": 56, "column": null } }]
				},
				"2": {
					"loc": { "start": { "line": 54, "column": 6 }, "end": { "line": 54, "column": 79 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 54, "column": 6 }, "end": { "line": 54, "column": 18 } },
						{ "start": { "line": 54, "column": 22 }, "end": { "line": 54, "column": 53 } },
						{ "start": { "line": 54, "column": 53 }, "end": { "line": 54, "column": 79 } }
					]
				},
				"3": {
					"loc": { "start": { "line": 60, "column": 3 }, "end": { "line": 62, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 60, "column": 3 }, "end": { "line": 62, "column": null } }]
				},
				"4": {
					"loc": { "start": { "line": 68, "column": 2 }, "end": { "line": 71, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 68, "column": 2 }, "end": { "line": 71, "column": null } }]
				}
			},
			"s": {
				"0": 0,
				"1": 0,
				"2": 0,
				"3": 0,
				"4": 0,
				"5": 0,
				"6": 0,
				"7": 0,
				"8": 0,
				"9": 0,
				"10": 0,
				"11": 0,
				"12": 0,
				"13": 0,
				"14": 0,
				"15": 0,
				"16": 0,
				"17": 0,
				"18": 0,
				"19": 0,
				"20": 0
			},
			"f": { "0": 0, "1": 0 },
			"b": { "0": [0], "1": [0], "2": [0, 0, 0], "3": [0], "4": [0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/label.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/label.tsx",
			"statementMap": {
				"0": { "start": { "line": 21, "column": 9 }, "end": { "line": 21, "column": null } },
				"1": { "start": { "line": 3, "column": 23 }, "end": { "line": 3, "column": null } },
				"2": { "start": { "line": 4, "column": 32 }, "end": { "line": 4, "column": null } },
				"3": { "start": { "line": 6, "column": 19 }, "end": { "line": 6, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "Label",
					"decl": { "start": { "line": 8, "column": 9 }, "end": { "line": 8, "column": 15 } },
					"loc": { "start": { "line": 8, "column": 88 }, "end": { "line": 19, "column": null } }
				}
			},
			"branchMap": {},
			"s": { "0": 0, "1": 0, "2": 0, "3": 0 },
			"f": { "0": 0 },
			"b": {}
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/app/manifest.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/app/manifest.ts",
			"statementMap": {
				"0": { "start": { "line": 3, "column": 24 }, "end": { "line": 3, "column": null } },
				"1": { "start": { "line": 4, "column": 1 }, "end": { "line": 42, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "manifest",
					"decl": { "start": { "line": 3, "column": 24 }, "end": { "line": 3, "column": null } },
					"loc": { "start": { "line": 3, "column": 24 }, "end": { "line": 43, "column": null } }
				}
			},
			"branchMap": {},
			"s": { "0": 0, "1": 0 },
			"f": { "0": 0 },
			"b": {}
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/switch.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/switch.tsx",
			"statementMap": {
				"0": { "start": { "line": 28, "column": 9 }, "end": { "line": 28, "column": null } },
				"1": { "start": { "line": 3, "column": 23 }, "end": { "line": 3, "column": null } },
				"2": { "start": { "line": 4, "column": 33 }, "end": { "line": 4, "column": null } },
				"3": { "start": { "line": 6, "column": 19 }, "end": { "line": 6, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "Switch",
					"decl": { "start": { "line": 8, "column": 9 }, "end": { "line": 8, "column": 16 } },
					"loc": { "start": { "line": 8, "column": 90 }, "end": { "line": 26, "column": null } }
				}
			},
			"branchMap": {},
			"s": { "0": 0, "1": 0, "2": 0, "3": 0 },
			"f": { "0": 0 },
			"b": {}
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/card.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/card.tsx",
			"statementMap": {
				"0": { "start": { "line": 56, "column": 9 }, "end": { "line": 56, "column": 15 } },
				"1": { "start": { "line": 56, "column": 50 }, "end": { "line": 56, "column": 62 } },
				"2": { "start": { "line": 56, "column": 79 }, "end": { "line": 56, "column": null } },
				"3": { "start": { "line": 56, "column": 62 }, "end": { "line": 56, "column": 79 } },
				"4": { "start": { "line": 56, "column": 27 }, "end": { "line": 56, "column": 39 } },
				"5": { "start": { "line": 56, "column": 15 }, "end": { "line": 56, "column": 27 } },
				"6": { "start": { "line": 56, "column": 39 }, "end": { "line": 56, "column": 50 } },
				"7": { "start": { "line": 1, "column": 23 }, "end": { "line": 1, "column": null } },
				"8": { "start": { "line": 3, "column": 19 }, "end": { "line": 3, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "Card",
					"decl": { "start": { "line": 5, "column": 9 }, "end": { "line": 5, "column": 14 } },
					"loc": { "start": { "line": 5, "column": 66 }, "end": { "line": 13, "column": null } }
				},
				"1": {
					"name": "CardHeader",
					"decl": { "start": { "line": 15, "column": 9 }, "end": { "line": 15, "column": 20 } },
					"loc": { "start": { "line": 15, "column": 72 }, "end": { "line": 26, "column": null } }
				},
				"2": {
					"name": "CardTitle",
					"decl": { "start": { "line": 28, "column": 9 }, "end": { "line": 28, "column": 19 } },
					"loc": { "start": { "line": 28, "column": 71 }, "end": { "line": 30, "column": null } }
				},
				"3": {
					"name": "CardDescription",
					"decl": { "start": { "line": 32, "column": 9 }, "end": { "line": 32, "column": 25 } },
					"loc": { "start": { "line": 32, "column": 77 }, "end": { "line": 34, "column": null } }
				},
				"4": {
					"name": "CardAction",
					"decl": { "start": { "line": 36, "column": 9 }, "end": { "line": 36, "column": 20 } },
					"loc": { "start": { "line": 36, "column": 72 }, "end": { "line": 44, "column": null } }
				},
				"5": {
					"name": "CardContent",
					"decl": { "start": { "line": 46, "column": 9 }, "end": { "line": 46, "column": 21 } },
					"loc": { "start": { "line": 46, "column": 73 }, "end": { "line": 48, "column": null } }
				},
				"6": {
					"name": "CardFooter",
					"decl": { "start": { "line": 50, "column": 9 }, "end": { "line": 50, "column": 20 } },
					"loc": { "start": { "line": 50, "column": 72 }, "end": { "line": 54, "column": null } }
				}
			},
			"branchMap": {},
			"s": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0 },
			"f": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 },
			"b": {}
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/slider.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/slider.tsx",
			"statementMap": {
				"0": { "start": { "line": 56, "column": 9 }, "end": { "line": 56, "column": null } },
				"1": { "start": { "line": 3, "column": 23 }, "end": { "line": 3, "column": null } },
				"2": { "start": { "line": 4, "column": 33 }, "end": { "line": 4, "column": null } },
				"3": { "start": { "line": 6, "column": 19 }, "end": { "line": 6, "column": null } },
				"4": { "start": { "line": 16, "column": 17 }, "end": { "line": 18, "column": null } },
				"5": { "start": { "line": 17, "column": 9 }, "end": { "line": 17, "column": null } },
				"6": { "start": { "line": 46, "column": 4 }, "end": { "line": 48, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "Slider",
					"decl": { "start": { "line": 8, "column": 9 }, "end": { "line": 8, "column": 16 } },
					"loc": { "start": { "line": 15, "column": 52 }, "end": { "line": 54, "column": null } }
				},
				"1": {
					"name": "(anonymous_5)",
					"decl": { "start": { "line": 17, "column": 2 }, "end": { "line": 17, "column": 9 } },
					"loc": { "start": { "line": 17, "column": 9 }, "end": { "line": 17, "column": null } }
				},
				"2": {
					"name": "(anonymous_6)",
					"decl": { "start": { "line": 45, "column": 43 }, "end": { "line": 45, "column": 44 } },
					"loc": { "start": { "line": 46, "column": 4 }, "end": { "line": 48, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 12, "column": 1 }, "end": { "line": 12, "column": 8 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 12, "column": 7 }, "end": { "line": 12, "column": 8 } }]
				},
				"1": {
					"loc": { "start": { "line": 13, "column": 1 }, "end": { "line": 13, "column": 10 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 13, "column": 7 }, "end": { "line": 13, "column": 10 } }]
				},
				"2": {
					"loc": { "start": { "line": 17, "column": 9 }, "end": { "line": 17, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 17, "column": 32 }, "end": { "line": 17, "column": 40 } },
						{ "start": { "line": 17, "column": 40 }, "end": { "line": 17, "column": null } }
					]
				},
				"3": {
					"loc": { "start": { "line": 17, "column": 40 }, "end": { "line": 17, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 17, "column": 70 }, "end": { "line": 17, "column": 85 } },
						{ "start": { "line": 17, "column": 85 }, "end": { "line": 17, "column": null } }
					]
				}
			},
			"s": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 },
			"f": { "0": 0, "1": 0, "2": 0 },
			"b": { "0": [0], "1": [0], "2": [0, 0], "3": [0, 0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/app/sitemap.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/app/sitemap.ts",
			"statementMap": {
				"0": { "start": { "line": 5, "column": 24 }, "end": { "line": 5, "column": null } },
				"1": { "start": { "line": 3, "column": 16 }, "end": { "line": 3, "column": null } },
				"2": { "start": { "line": 6, "column": 1 }, "end": { "line": 13, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "sitemap",
					"decl": { "start": { "line": 5, "column": 24 }, "end": { "line": 5, "column": null } },
					"loc": { "start": { "line": 5, "column": 24 }, "end": { "line": 14, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 3, "column": 16 }, "end": { "line": 3, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 3, "column": 16 }, "end": { "line": 3, "column": 48 } },
						{ "start": { "line": 3, "column": 52 }, "end": { "line": 3, "column": null } }
					]
				}
			},
			"s": { "0": 0, "1": 0, "2": 0 },
			"f": { "0": 0 },
			"b": { "0": [0, 0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/components/BackgroundGradient.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/components/BackgroundGradient.tsx",
			"statementMap": {
				"0": { "start": { "line": 25, "column": 13 }, "end": { "line": 25, "column": 43 } },
				"1": { "start": { "line": 3, "column": 51 }, "end": { "line": 3, "column": null } },
				"2": { "start": { "line": 4, "column": 19 }, "end": { "line": 4, "column": null } },
				"3": { "start": { "line": 25, "column": 43 }, "end": { "line": 198, "column": null } },
				"4": { "start": { "line": 56, "column": 24 }, "end": { "line": 56, "column": null } },
				"5": { "start": { "line": 57, "column": 25 }, "end": { "line": 57, "column": null } },
				"6": { "start": { "line": 58, "column": 25 }, "end": { "line": 58, "column": null } },
				"7": { "start": { "line": 59, "column": 23 }, "end": { "line": 59, "column": null } },
				"8": { "start": { "line": 60, "column": 23 }, "end": { "line": 60, "column": null } },
				"9": { "start": { "line": 62, "column": 1 }, "end": { "line": 84, "column": null } },
				"10": { "start": { "line": 63, "column": 2 }, "end": { "line": 63, "column": null } },
				"11": { "start": { "line": 64, "column": 2 }, "end": { "line": 64, "column": null } },
				"12": { "start": { "line": 65, "column": 2 }, "end": { "line": 65, "column": null } },
				"13": { "start": { "line": 66, "column": 2 }, "end": { "line": 66, "column": null } },
				"14": { "start": { "line": 67, "column": 2 }, "end": { "line": 67, "column": null } },
				"15": { "start": { "line": 68, "column": 2 }, "end": { "line": 68, "column": null } },
				"16": { "start": { "line": 69, "column": 2 }, "end": { "line": 69, "column": null } },
				"17": { "start": { "line": 70, "column": 2 }, "end": { "line": 70, "column": null } },
				"18": { "start": { "line": 71, "column": 2 }, "end": { "line": 71, "column": null } },
				"19": { "start": { "line": 72, "column": 2 }, "end": { "line": 72, "column": null } },
				"20": { "start": { "line": 86, "column": 1 }, "end": { "line": 94, "column": null } },
				"21": { "start": { "line": 88, "column": 3 }, "end": { "line": 88, "column": null } },
				"22": { "start": { "line": 88, "column": 32 }, "end": { "line": 88, "column": null } },
				"23": { "start": { "line": 89, "column": 3 }, "end": { "line": 89, "column": null } },
				"24": { "start": { "line": 90, "column": 3 }, "end": { "line": 90, "column": null } },
				"25": { "start": { "line": 91, "column": 3 }, "end": { "line": 91, "column": null } },
				"26": { "start": { "line": 93, "column": 2 }, "end": { "line": 93, "column": null } },
				"27": { "start": { "line": 96, "column": 25 }, "end": { "line": 102, "column": null } },
				"28": { "start": { "line": 97, "column": 2 }, "end": { "line": 101, "column": null } },
				"29": { "start": { "line": 98, "column": 16 }, "end": { "line": 98, "column": null } },
				"30": { "start": { "line": 99, "column": 3 }, "end": { "line": 99, "column": null } },
				"31": { "start": { "line": 100, "column": 3 }, "end": { "line": 100, "column": null } },
				"32": { "start": { "line": 104, "column": 33 }, "end": { "line": 104, "column": null } },
				"33": { "start": { "line": 105, "column": 1 }, "end": { "line": 107, "column": null } },
				"34": { "start": { "line": 106, "column": 2 }, "end": { "line": 106, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "(anonymous_4)",
					"decl": { "start": { "line": 25, "column": 43 }, "end": { "line": 25, "column": 44 } },
					"loc": { "start": { "line": 55, "column": 1 }, "end": { "line": 198, "column": null } }
				},
				"1": {
					"name": "(anonymous_5)",
					"decl": { "start": { "line": 62, "column": 11 }, "end": { "line": 62, "column": null } },
					"loc": { "start": { "line": 62, "column": 11 }, "end": { "line": 73, "column": 4 } }
				},
				"2": {
					"name": "(anonymous_6)",
					"decl": { "start": { "line": 86, "column": 11 }, "end": { "line": 86, "column": null } },
					"loc": { "start": { "line": 86, "column": 11 }, "end": { "line": 94, "column": 4 } }
				},
				"3": {
					"name": "move",
					"decl": { "start": { "line": 87, "column": 11 }, "end": { "line": 87, "column": null } },
					"loc": { "start": { "line": 87, "column": 11 }, "end": { "line": 92, "column": null } }
				},
				"4": {
					"name": "(anonymous_8)",
					"decl": { "start": { "line": 96, "column": 25 }, "end": { "line": 96, "column": 26 } },
					"loc": { "start": { "line": 96, "column": 26 }, "end": { "line": 102, "column": null } }
				},
				"5": {
					"name": "(anonymous_9)",
					"decl": { "start": { "line": 105, "column": 11 }, "end": { "line": 105, "column": null } },
					"loc": { "start": { "line": 105, "column": 11 }, "end": { "line": 107, "column": 4 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 26, "column": 1 }, "end": { "line": 26, "column": 44 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 26, "column": 27 }, "end": { "line": 26, "column": 44 } }]
				},
				"1": {
					"loc": { "start": { "line": 27, "column": 1 }, "end": { "line": 27, "column": 42 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 27, "column": 25 }, "end": { "line": 27, "column": 42 } }]
				},
				"2": {
					"loc": { "start": { "line": 28, "column": 1 }, "end": { "line": 28, "column": 27 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 28, "column": 14 }, "end": { "line": 28, "column": 27 } }]
				},
				"3": {
					"loc": { "start": { "line": 29, "column": 1 }, "end": { "line": 29, "column": 29 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 29, "column": 15 }, "end": { "line": 29, "column": 29 } }]
				},
				"4": {
					"loc": { "start": { "line": 30, "column": 1 }, "end": { "line": 30, "column": 28 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 30, "column": 14 }, "end": { "line": 30, "column": 28 } }]
				},
				"5": {
					"loc": { "start": { "line": 31, "column": 1 }, "end": { "line": 31, "column": 29 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 31, "column": 15 }, "end": { "line": 31, "column": 29 } }]
				},
				"6": {
					"loc": { "start": { "line": 32, "column": 1 }, "end": { "line": 32, "column": 28 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 32, "column": 14 }, "end": { "line": 32, "column": 28 } }]
				},
				"7": {
					"loc": { "start": { "line": 33, "column": 1 }, "end": { "line": 33, "column": 31 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 33, "column": 16 }, "end": { "line": 33, "column": 31 } }]
				},
				"8": {
					"loc": { "start": { "line": 34, "column": 1 }, "end": { "line": 34, "column": 13 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 34, "column": 8 }, "end": { "line": 34, "column": 13 } }]
				},
				"9": {
					"loc": { "start": { "line": 35, "column": 1 }, "end": { "line": 35, "column": 29 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 35, "column": 17 }, "end": { "line": 35, "column": 29 } }]
				},
				"10": {
					"loc": { "start": { "line": 38, "column": 1 }, "end": { "line": 38, "column": 19 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 38, "column": 15 }, "end": { "line": 38, "column": 19 } }]
				},
				"11": {
					"loc": { "start": { "line": 88, "column": 3 }, "end": { "line": 88, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 88, "column": 3 }, "end": { "line": 88, "column": null } }]
				},
				"12": {
					"loc": { "start": { "line": 97, "column": 2 }, "end": { "line": 101, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 97, "column": 2 }, "end": { "line": 101, "column": null } }]
				},
				"13": {
					"loc": { "start": { "line": 129, "column": 5 }, "end": { "line": 129, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 129, "column": 16 }, "end": { "line": 129, "column": 29 } },
						{ "start": { "line": 129, "column": 29 }, "end": { "line": 129, "column": null } }
					]
				},
				"14": {
					"loc": { "start": { "line": 182, "column": 5 }, "end": { "line": 182, "column": null } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 182, "column": 5 }, "end": { "line": 182, "column": null } }]
				}
			},
			"s": {
				"0": 0,
				"1": 0,
				"2": 0,
				"3": 0,
				"4": 0,
				"5": 0,
				"6": 0,
				"7": 0,
				"8": 0,
				"9": 0,
				"10": 0,
				"11": 0,
				"12": 0,
				"13": 0,
				"14": 0,
				"15": 0,
				"16": 0,
				"17": 0,
				"18": 0,
				"19": 0,
				"20": 0,
				"21": 0,
				"22": 0,
				"23": 0,
				"24": 0,
				"25": 0,
				"26": 0,
				"27": 0,
				"28": 0,
				"29": 0,
				"30": 0,
				"31": 0,
				"32": 0,
				"33": 0,
				"34": 0
			},
			"f": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 },
			"b": {
				"0": [0],
				"1": [0],
				"2": [0],
				"3": [0],
				"4": [0],
				"5": [0],
				"6": [0],
				"7": [0],
				"8": [0],
				"9": [0],
				"10": [0],
				"11": [0],
				"12": [0],
				"13": [0, 0],
				"14": [0]
			}
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/button.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/button.tsx",
			"statementMap": {
				"0": { "start": { "line": 50, "column": 9 }, "end": { "line": 50, "column": 17 } },
				"1": { "start": { "line": 50, "column": 17 }, "end": { "line": 50, "column": null } },
				"2": { "start": { "line": 1, "column": 23 }, "end": { "line": 1, "column": null } },
				"3": { "start": { "line": 2, "column": 21 }, "end": { "line": 2, "column": null } },
				"4": { "start": { "line": 3, "column": 39 }, "end": { "line": 3, "column": null } },
				"5": { "start": { "line": 5, "column": 19 }, "end": { "line": 5, "column": null } },
				"6": { "start": { "line": 7, "column": 23 }, "end": { "line": 32, "column": null } },
				"7": { "start": { "line": 45, "column": 14 }, "end": { "line": 45, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "Button",
					"decl": { "start": { "line": 35, "column": 9 }, "end": { "line": 35, "column": 16 } },
					"loc": { "start": { "line": 44, "column": 2 }, "end": { "line": 48, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 39, "column": 1 }, "end": { "line": 39, "column": 16 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 39, "column": 11 }, "end": { "line": 39, "column": 16 } }]
				},
				"1": {
					"loc": { "start": { "line": 45, "column": 14 }, "end": { "line": 45, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 45, "column": 24 }, "end": { "line": 45, "column": 28 } },
						{ "start": { "line": 45, "column": 31 }, "end": { "line": 45, "column": null } }
					]
				}
			},
			"s": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0 },
			"f": { "0": 0 },
			"b": { "0": [0], "1": [0, 0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/app/robots.ts": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/app/robots.ts",
			"statementMap": {
				"0": { "start": { "line": 5, "column": 24 }, "end": { "line": 5, "column": null } },
				"1": { "start": { "line": 3, "column": 16 }, "end": { "line": 3, "column": null } },
				"2": { "start": { "line": 6, "column": 1 }, "end": { "line": 15, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "robots",
					"decl": { "start": { "line": 5, "column": 24 }, "end": { "line": 5, "column": null } },
					"loc": { "start": { "line": 5, "column": 24 }, "end": { "line": 16, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 3, "column": 16 }, "end": { "line": 3, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 3, "column": 16 }, "end": { "line": 3, "column": 48 } },
						{ "start": { "line": 3, "column": 52 }, "end": { "line": 3, "column": null } }
					]
				}
			},
			"s": { "0": 0, "1": 0, "2": 0 },
			"f": { "0": 0 },
			"b": { "0": [0, 0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/select.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/components/ui/select.tsx",
			"statementMap": {
				"0": { "start": { "line": 148, "column": 1 }, "end": { "line": 148, "column": null } },
				"1": { "start": { "line": 149, "column": 1 }, "end": { "line": 149, "column": null } },
				"2": { "start": { "line": 150, "column": 1 }, "end": { "line": 150, "column": null } },
				"3": { "start": { "line": 151, "column": 1 }, "end": { "line": 151, "column": null } },
				"4": { "start": { "line": 152, "column": 1 }, "end": { "line": 152, "column": null } },
				"5": { "start": { "line": 153, "column": 1 }, "end": { "line": 153, "column": null } },
				"6": { "start": { "line": 154, "column": 1 }, "end": { "line": 154, "column": null } },
				"7": { "start": { "line": 155, "column": 1 }, "end": { "line": 155, "column": null } },
				"8": { "start": { "line": 156, "column": 1 }, "end": { "line": 156, "column": null } },
				"9": { "start": { "line": 157, "column": 1 }, "end": { "line": 157, "column": null } },
				"10": { "start": { "line": 1, "column": 23 }, "end": { "line": 1, "column": null } },
				"11": { "start": { "line": 2, "column": 33 }, "end": { "line": 2, "column": null } },
				"12": { "start": { "line": 3, "column": 58 }, "end": { "line": 3, "column": null } },
				"13": { "start": { "line": 5, "column": 19 }, "end": { "line": 5, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "Select",
					"decl": { "start": { "line": 7, "column": 9 }, "end": { "line": 7, "column": 16 } },
					"loc": { "start": { "line": 7, "column": 79 }, "end": { "line": 9, "column": null } }
				},
				"1": {
					"name": "SelectGroup",
					"decl": { "start": { "line": 11, "column": 9 }, "end": { "line": 11, "column": 21 } },
					"loc": { "start": { "line": 11, "column": 85 }, "end": { "line": 13, "column": null } }
				},
				"2": {
					"name": "SelectValue",
					"decl": { "start": { "line": 15, "column": 9 }, "end": { "line": 15, "column": 21 } },
					"loc": { "start": { "line": 15, "column": 85 }, "end": { "line": 17, "column": null } }
				},
				"3": {
					"name": "SelectTrigger",
					"decl": { "start": { "line": 19, "column": 9 }, "end": { "line": 19, "column": 23 } },
					"loc": { "start": { "line": 26, "column": 1 }, "end": { "line": 43, "column": null } }
				},
				"4": {
					"name": "SelectContent",
					"decl": { "start": { "line": 45, "column": 9 }, "end": { "line": 45, "column": 23 } },
					"loc": { "start": { "line": 50, "column": 55 }, "end": { "line": 78, "column": null } }
				},
				"5": {
					"name": "SelectLabel",
					"decl": { "start": { "line": 80, "column": 9 }, "end": { "line": 80, "column": 21 } },
					"loc": { "start": { "line": 80, "column": 96 }, "end": { "line": 88, "column": null } }
				},
				"6": {
					"name": "SelectItem",
					"decl": { "start": { "line": 90, "column": 9 }, "end": { "line": 90, "column": 20 } },
					"loc": { "start": { "line": 90, "column": 104 }, "end": { "line": 108, "column": null } }
				},
				"7": {
					"name": "SelectSeparator",
					"decl": { "start": { "line": 110, "column": 9 }, "end": { "line": 110, "column": 25 } },
					"loc": { "start": { "line": 110, "column": 104 }, "end": { "line": 118, "column": null } }
				},
				"8": {
					"name": "SelectScrollUpButton",
					"decl": { "start": { "line": 120, "column": 9 }, "end": { "line": 120, "column": 30 } },
					"loc": { "start": { "line": 120, "column": 114 }, "end": { "line": 130, "column": null } }
				},
				"9": {
					"name": "SelectScrollDownButton",
					"decl": { "start": { "line": 132, "column": 9 }, "end": { "line": 132, "column": 32 } },
					"loc": { "start": { "line": 135, "column": 64 }, "end": { "line": 145, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 21, "column": 1 }, "end": { "line": 21, "column": 17 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 21, "column": 8 }, "end": { "line": 21, "column": 17 } }]
				},
				"1": {
					"loc": { "start": { "line": 48, "column": 1 }, "end": { "line": 48, "column": 20 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 48, "column": 12 }, "end": { "line": 48, "column": 20 } }]
				},
				"2": {
					"loc": { "start": { "line": 57, "column": 5 }, "end": { "line": 58, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 57, "column": 5 }, "end": { "line": 57, "column": null } },
						{ "start": { "line": 58, "column": 6 }, "end": { "line": 58, "column": null } }
					]
				},
				"3": {
					"loc": { "start": { "line": 68, "column": 6 }, "end": { "line": 69, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 68, "column": 6 }, "end": { "line": 68, "column": null } },
						{ "start": { "line": 69, "column": 7 }, "end": { "line": 69, "column": null } }
					]
				}
			},
			"s": {
				"0": 0,
				"1": 0,
				"2": 0,
				"3": 0,
				"4": 0,
				"5": 0,
				"6": 0,
				"7": 0,
				"8": 0,
				"9": 0,
				"10": 0,
				"11": 0,
				"12": 0,
				"13": 0
			},
			"f": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 },
			"b": { "0": [0], "1": [0], "2": [0, 0], "3": [0, 0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/components/CodeEditor.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/components/CodeEditor.tsx",
			"statementMap": {
				"0": { "start": { "line": 48, "column": 16 }, "end": { "line": 48, "column": 27 } },
				"1": { "start": { "line": 3, "column": 20 }, "end": { "line": 3, "column": null } },
				"2": { "start": { "line": 4, "column": 34 }, "end": { "line": 4, "column": null } },
				"3": { "start": { "line": 7, "column": 29 }, "end": { "line": 7, "column": null } },
				"4": { "start": { "line": 56, "column": 19 }, "end": { "line": 56, "column": null } },
				"5": { "start": { "line": 57, "column": 19 }, "end": { "line": 57, "column": null } },
				"6": { "start": { "line": 59, "column": 28 }, "end": { "line": 63, "column": null } },
				"7": { "start": { "line": 60, "column": 2 }, "end": { "line": 62, "column": null } },
				"8": { "start": { "line": 61, "column": 3 }, "end": { "line": 61, "column": null } },
				"9": { "start": { "line": 66, "column": 1 }, "end": { "line": 93, "column": null } },
				"10": { "start": { "line": 67, "column": 2 }, "end": { "line": 67, "column": null } },
				"11": { "start": { "line": 67, "column": 48 }, "end": { "line": 67, "column": null } },
				"12": { "start": { "line": 69, "column": 17 }, "end": { "line": 69, "column": 34 } },
				"13": { "start": { "line": 70, "column": 16 }, "end": { "line": 70, "column": null } },
				"14": { "start": { "line": 71, "column": 2 }, "end": { "line": 71, "column": null } },
				"15": { "start": { "line": 71, "column": 14 }, "end": { "line": 71, "column": null } },
				"16": { "start": { "line": 74, "column": 2 }, "end": { "line": 74, "column": null } },
				"17": { "start": { "line": 77, "column": 2 }, "end": { "line": 92, "column": null } },
				"18": { "start": { "line": 78, "column": 19 }, "end": { "line": 87, "column": null } },
				"19": { "start": { "line": 88, "column": 3 }, "end": { "line": 88, "column": null } },
				"20": { "start": { "line": 91, "column": 3 }, "end": { "line": 91, "column": null } },
				"21": { "start": { "line": 95, "column": 30 }, "end": { "line": 165, "column": null } },
				"22": { "start": { "line": 96, "column": 2 }, "end": { "line": 96, "column": null } },
				"23": { "start": { "line": 97, "column": 2 }, "end": { "line": 97, "column": null } },
				"24": { "start": { "line": 100, "column": 2 }, "end": { "line": 133, "column": null } },
				"25": { "start": { "line": 136, "column": 2 }, "end": { "line": 136, "column": null } },
				"26": { "start": { "line": 139, "column": 2 }, "end": { "line": 141, "column": null } },
				"27": { "start": { "line": 140, "column": 3 }, "end": { "line": 140, "column": null } },
				"28": { "start": { "line": 143, "column": 2 }, "end": { "line": 145, "column": null } },
				"29": { "start": { "line": 144, "column": 3 }, "end": { "line": 144, "column": null } },
				"30": { "start": { "line": 148, "column": 2 }, "end": { "line": 164, "column": null } },
				"31": { "start": { "line": 149, "column": 17 }, "end": { "line": 149, "column": null } },
				"32": { "start": { "line": 150, "column": 3 }, "end": { "line": 163, "column": null } },
				"33": { "start": { "line": 151, "column": 20 }, "end": { "line": 160, "column": null } },
				"34": { "start": { "line": 161, "column": 4 }, "end": { "line": 161, "column": null } },
				"35": { "start": { "line": 162, "column": 4 }, "end": { "line": 162, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "(anonymous_5)",
					"decl": { "start": { "line": 7, "column": 23 }, "end": { "line": 7, "column": 29 } },
					"loc": { "start": { "line": 7, "column": 29 }, "end": { "line": 7, "column": null } }
				},
				"1": {
					"name": "(anonymous_6)",
					"decl": { "start": { "line": 7, "column": 29 }, "end": { "line": 7, "column": 36 } },
					"loc": { "start": { "line": 7, "column": 29 }, "end": { "line": 7, "column": null } }
				},
				"2": {
					"name": "CodeEditor",
					"decl": { "start": { "line": 48, "column": 16 }, "end": { "line": 48, "column": 27 } },
					"loc": { "start": { "line": 55, "column": 18 }, "end": { "line": 214, "column": null } }
				},
				"3": {
					"name": "(anonymous_10)",
					"decl": { "start": { "line": 59, "column": 28 }, "end": { "line": 59, "column": 29 } },
					"loc": { "start": { "line": 59, "column": 29 }, "end": { "line": 63, "column": null } }
				},
				"4": {
					"name": "(anonymous_11)",
					"decl": { "start": { "line": 66, "column": 11 }, "end": { "line": 66, "column": null } },
					"loc": { "start": { "line": 66, "column": 11 }, "end": { "line": 93, "column": 4 } }
				},
				"5": {
					"name": "(anonymous_12)",
					"decl": { "start": { "line": 95, "column": 30 }, "end": { "line": 95, "column": 31 } },
					"loc": { "start": { "line": 95, "column": 44 }, "end": { "line": 165, "column": null } }
				},
				"6": {
					"name": "(anonymous_13)",
					"decl": { "start": { "line": 139, "column": 30 }, "end": { "line": 139, "column": null } },
					"loc": { "start": { "line": 139, "column": 30 }, "end": { "line": 141, "column": null } }
				},
				"7": {
					"name": "(anonymous_14)",
					"decl": { "start": { "line": 143, "column": 29 }, "end": { "line": 143, "column": null } },
					"loc": { "start": { "line": 143, "column": 29 }, "end": { "line": 145, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 51, "column": 1 }, "end": { "line": 51, "column": 17 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 51, "column": 12 }, "end": { "line": 51, "column": 17 } }]
				},
				"1": {
					"loc": { "start": { "line": 52, "column": 1 }, "end": { "line": 52, "column": 17 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 52, "column": 12 }, "end": { "line": 52, "column": 17 } }]
				},
				"2": {
					"loc": { "start": { "line": 53, "column": 1 }, "end": { "line": 53, "column": 16 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 53, "column": 10 }, "end": { "line": 53, "column": 16 } }]
				},
				"3": {
					"loc": { "start": { "line": 60, "column": 2 }, "end": { "line": 62, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 60, "column": 2 }, "end": { "line": 62, "column": null } }]
				},
				"4": {
					"loc": { "start": { "line": 60, "column": 6 }, "end": { "line": 60, "column": 39 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 60, "column": 6 }, "end": { "line": 60, "column": 18 } },
						{ "start": { "line": 60, "column": 18 }, "end": { "line": 60, "column": 39 } }
					]
				},
				"5": {
					"loc": { "start": { "line": 67, "column": 2 }, "end": { "line": 67, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 67, "column": 2 }, "end": { "line": 67, "column": null } }]
				},
				"6": {
					"loc": { "start": { "line": 67, "column": 6 }, "end": { "line": 67, "column": 46 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 67, "column": 6 }, "end": { "line": 67, "column": 24 } },
						{ "start": { "line": 67, "column": 28 }, "end": { "line": 67, "column": 46 } }
					]
				},
				"7": {
					"loc": { "start": { "line": 71, "column": 2 }, "end": { "line": 71, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 71, "column": 2 }, "end": { "line": 71, "column": null } }]
				},
				"8": {
					"loc": { "start": { "line": 77, "column": 2 }, "end": { "line": 92, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 77, "column": 2 }, "end": { "line": 92, "column": null } }]
				},
				"9": {
					"loc": { "start": { "line": 77, "column": 6 }, "end": { "line": 77, "column": 25 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 77, "column": 6 }, "end": { "line": 77, "column": 15 } },
						{ "start": { "line": 77, "column": 15 }, "end": { "line": 77, "column": 25 } }
					]
				},
				"10": {
					"loc": { "start": { "line": 81, "column": 18 }, "end": { "line": 81, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 81, "column": 18 }, "end": { "line": 81, "column": 30 } },
						{ "start": { "line": 81, "column": 34 }, "end": { "line": 81, "column": null } }
					]
				},
				"11": {
					"loc": { "start": { "line": 83, "column": 16 }, "end": { "line": 83, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 83, "column": 31 }, "end": { "line": 83, "column": 51 } },
						{ "start": { "line": 83, "column": 51 }, "end": { "line": 83, "column": null } }
					]
				},
				"12": {
					"loc": { "start": { "line": 148, "column": 2 }, "end": { "line": 164, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 148, "column": 2 }, "end": { "line": 164, "column": null } }]
				},
				"13": {
					"loc": { "start": { "line": 148, "column": 6 }, "end": { "line": 148, "column": 25 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 148, "column": 6 }, "end": { "line": 148, "column": 15 } },
						{ "start": { "line": 148, "column": 15 }, "end": { "line": 148, "column": 25 } }
					]
				},
				"14": {
					"loc": { "start": { "line": 150, "column": 3 }, "end": { "line": 163, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 150, "column": 3 }, "end": { "line": 163, "column": null } }]
				},
				"15": {
					"loc": { "start": { "line": 154, "column": 19 }, "end": { "line": 154, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 154, "column": 19 }, "end": { "line": 154, "column": 31 } },
						{ "start": { "line": 154, "column": 35 }, "end": { "line": 154, "column": null } }
					]
				},
				"16": {
					"loc": { "start": { "line": 156, "column": 17 }, "end": { "line": 156, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 156, "column": 32 }, "end": { "line": 156, "column": 52 } },
						{ "start": { "line": 156, "column": 52 }, "end": { "line": 156, "column": null } }
					]
				},
				"17": {
					"loc": { "start": { "line": 206, "column": 22 }, "end": { "line": 206, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 206, "column": 33 }, "end": { "line": 206, "column": 41 } },
						{ "start": { "line": 206, "column": 41 }, "end": { "line": 206, "column": null } }
					]
				}
			},
			"s": {
				"0": 0,
				"1": 0,
				"2": 0,
				"3": 0,
				"4": 0,
				"5": 0,
				"6": 0,
				"7": 0,
				"8": 0,
				"9": 0,
				"10": 0,
				"11": 0,
				"12": 0,
				"13": 0,
				"14": 0,
				"15": 0,
				"16": 0,
				"17": 0,
				"18": 0,
				"19": 0,
				"20": 0,
				"21": 0,
				"22": 0,
				"23": 0,
				"24": 0,
				"25": 0,
				"26": 0,
				"27": 0,
				"28": 0,
				"29": 0,
				"30": 0,
				"31": 0,
				"32": 0,
				"33": 0,
				"34": 0,
				"35": 0
			},
			"f": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0 },
			"b": {
				"0": [0],
				"1": [0],
				"2": [0],
				"3": [0],
				"4": [0, 0],
				"5": [0],
				"6": [0, 0],
				"7": [0],
				"8": [0],
				"9": [0, 0],
				"10": [0, 0],
				"11": [0, 0],
				"12": [0],
				"13": [0, 0],
				"14": [0],
				"15": [0, 0],
				"16": [0, 0],
				"17": [0, 0]
			}
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/app/layout.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/app/layout.tsx",
			"statementMap": {
				"0": { "start": { "line": 117, "column": 24 }, "end": { "line": 117, "column": 35 } },
				"1": { "start": { "line": 16, "column": 13 }, "end": { "line": 16, "column": 34 } },
				"2": { "start": { "line": 9, "column": 13 }, "end": { "line": 9, "column": 34 } },
				"3": { "start": { "line": 2, "column": 26 }, "end": { "line": 2, "column": null } },
				"4": { "start": { "line": 3, "column": 30 }, "end": { "line": 3, "column": null } },
				"5": { "start": { "line": 4, "column": 32 }, "end": { "line": 4, "column": null } },
				"6": { "start": { "line": 5, "column": 7 }, "end": { "line": 5, "column": null } },
				"7": { "start": { "line": 7, "column": 16 }, "end": { "line": 7, "column": null } },
				"8": { "start": { "line": 9, "column": 34 }, "end": { "line": 14, "column": null } },
				"9": { "start": { "line": 16, "column": 34 }, "end": { "line": 115, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "RootLayout",
					"decl": { "start": { "line": 117, "column": 24 }, "end": { "line": 117, "column": 35 } },
					"loc": { "start": { "line": 117, "column": 78 }, "end": { "line": 315, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 7, "column": 16 }, "end": { "line": 7, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 7, "column": 16 }, "end": { "line": 7, "column": 48 } },
						{ "start": { "line": 7, "column": 52 }, "end": { "line": 7, "column": null } }
					]
				}
			},
			"s": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 },
			"f": { "0": 0 },
			"b": { "0": [0, 0] }
		},
		"/Users/billchirico/Developer/LUA-Obfuscator/web/app/page.tsx": {
			"path": "/Users/billchirico/Developer/LUA-Obfuscator/web/app/page.tsx",
			"statementMap": {
				"0": { "start": { "line": 174, "column": 24 }, "end": { "line": 174, "column": null } },
				"1": { "start": { "line": 3, "column": 43 }, "end": { "line": 3, "column": null } },
				"2": { "start": { "line": 4, "column": 19 }, "end": { "line": 4, "column": null } },
				"3": { "start": { "line": 5, "column": 23 }, "end": { "line": 5, "column": null } },
				"4": { "start": { "line": 6, "column": 21 }, "end": { "line": 6, "column": null } },
				"5": { "start": { "line": 7, "column": 22 }, "end": { "line": 7, "column": null } },
				"6": { "start": { "line": 8, "column": 23 }, "end": { "line": 8, "column": null } },
				"7": { "start": { "line": 9, "column": 23 }, "end": { "line": 9, "column": null } },
				"8": { "start": { "line": 22, "column": 7 }, "end": { "line": 22, "column": null } },
				"9": { "start": { "line": 23, "column": 27 }, "end": { "line": 23, "column": null } },
				"10": { "start": { "line": 24, "column": 29 }, "end": { "line": 24, "column": null } },
				"11": { "start": { "line": 25, "column": 44 }, "end": { "line": 25, "column": null } },
				"12": { "start": { "line": 26, "column": 59 }, "end": { "line": 26, "column": null } },
				"13": { "start": { "line": 29, "column": 25 }, "end": { "line": 163, "column": 1 } },
				"14": { "start": { "line": 175, "column": 35 }, "end": { "line": 175, "column": null } },
				"15": { "start": { "line": 176, "column": 37 }, "end": { "line": 176, "column": null } },
				"16": { "start": { "line": 177, "column": 41 }, "end": { "line": 177, "column": null } },
				"17": { "start": { "line": 178, "column": 27 }, "end": { "line": 178, "column": null } },
				"18": { "start": { "line": 179, "column": 37 }, "end": { "line": 179, "column": null } },
				"19": { "start": { "line": 180, "column": 39 }, "end": { "line": 180, "column": null } },
				"20": { "start": { "line": 181, "column": 57 }, "end": { "line": 181, "column": null } },
				"21": { "start": { "line": 183, "column": 33 }, "end": { "line": 190, "column": null } },
				"22": { "start": { "line": 193, "column": 1 }, "end": { "line": 199, "column": null } },
				"23": { "start": { "line": 194, "column": 2 }, "end": { "line": 198, "column": null } },
				"24": { "start": { "line": 195, "column": 3 }, "end": { "line": 195, "column": null } },
				"25": { "start": { "line": 196, "column": 17 }, "end": { "line": 196, "column": null } },
				"26": { "start": { "line": 196, "column": 34 }, "end": { "line": 196, "column": 66 } },
				"27": { "start": { "line": 197, "column": 3 }, "end": { "line": 197, "column": null } },
				"28": { "start": { "line": 197, "column": 16 }, "end": { "line": 197, "column": null } },
				"29": { "start": { "line": 202, "column": 27 }, "end": { "line": 207, "column": null } },
				"30": { "start": { "line": 203, "column": 2 }, "end": { "line": 203, "column": null } },
				"31": { "start": { "line": 204, "column": 2 }, "end": { "line": 206, "column": null } },
				"32": { "start": { "line": 205, "column": 3 }, "end": { "line": 205, "column": null } },
				"33": { "start": { "line": 209, "column": 23 }, "end": { "line": 255, "column": null } },
				"34": { "start": { "line": 210, "column": 2 }, "end": { "line": 210, "column": null } },
				"35": { "start": { "line": 211, "column": 2 }, "end": { "line": 211, "column": null } },
				"36": { "start": { "line": 212, "column": 2 }, "end": { "line": 212, "column": null } },
				"37": { "start": { "line": 213, "column": 2 }, "end": { "line": 213, "column": null } },
				"38": { "start": { "line": 215, "column": 2 }, "end": { "line": 254, "column": null } },
				"39": { "start": { "line": 216, "column": 18 }, "end": { "line": 223, "column": null } },
				"40": { "start": { "line": 225, "column": 3 }, "end": { "line": 251, "column": null } },
				"41": { "start": { "line": 226, "column": 4 }, "end": { "line": 226, "column": null } },
				"42": { "start": { "line": 227, "column": 4 }, "end": { "line": 227, "column": null } },
				"43": { "start": { "line": 228, "column": 4 }, "end": { "line": 228, "column": null } },
				"44": { "start": { "line": 232, "column": 5 }, "end": { "line": 240, "column": null } },
				"45": { "start": { "line": 242, "column": 4 }, "end": { "line": 246, "column": null } },
				"46": { "start": { "line": 246, "column": 20 }, "end": { "line": 246, "column": null } },
				"47": { "start": { "line": 248, "column": 4 }, "end": { "line": 248, "column": null } },
				"48": { "start": { "line": 249, "column": 4 }, "end": { "line": 249, "column": null } },
				"49": { "start": { "line": 250, "column": 4 }, "end": { "line": 250, "column": null } },
				"50": { "start": { "line": 253, "column": 3 }, "end": { "line": 253, "column": null } },
				"51": { "start": { "line": 257, "column": 25 }, "end": { "line": 268, "column": null } },
				"52": { "start": { "line": 258, "column": 2 }, "end": { "line": 267, "column": null } },
				"53": { "start": { "line": 259, "column": 3 }, "end": { "line": 259, "column": null } },
				"54": { "start": { "line": 260, "column": 3 }, "end": { "line": 260, "column": null } },
				"55": { "start": { "line": 261, "column": 3 }, "end": { "line": 261, "column": null } },
				"56": { "start": { "line": 261, "column": 20 }, "end": { "line": 261, "column": 43 } },
				"57": { "start": { "line": 264, "column": 3 }, "end": { "line": 264, "column": null } },
				"58": { "start": { "line": 264, "column": 45 }, "end": { "line": 264, "column": null } },
				"59": { "start": { "line": 266, "column": 3 }, "end": { "line": 266, "column": null } },
				"60": { "start": { "line": 270, "column": 22 }, "end": { "line": 281, "column": null } },
				"61": { "start": { "line": 271, "column": 15 }, "end": { "line": 271, "column": null } },
				"62": { "start": { "line": 272, "column": 14 }, "end": { "line": 272, "column": null } },
				"63": { "start": { "line": 273, "column": 12 }, "end": { "line": 273, "column": null } },
				"64": { "start": { "line": 274, "column": 2 }, "end": { "line": 274, "column": null } },
				"65": { "start": { "line": 275, "column": 2 }, "end": { "line": 275, "column": null } },
				"66": { "start": { "line": 276, "column": 2 }, "end": { "line": 276, "column": null } },
				"67": { "start": { "line": 277, "column": 2 }, "end": { "line": 277, "column": null } },
				"68": { "start": { "line": 280, "column": 2 }, "end": { "line": 280, "column": null } },
				"69": { "start": { "line": 280, "column": 48 }, "end": { "line": 280, "column": null } },
				"70": { "start": { "line": 284, "column": 31 }, "end": { "line": 289, "column": null } },
				"71": { "start": { "line": 285, "column": 2 }, "end": { "line": 285, "column": null } },
				"72": { "start": { "line": 285, "column": 39 }, "end": { "line": 285, "column": null } },
				"73": { "start": { "line": 286, "column": 2 }, "end": { "line": 286, "column": null } },
				"74": { "start": { "line": 286, "column": 38 }, "end": { "line": 286, "column": null } },
				"75": { "start": { "line": 287, "column": 2 }, "end": { "line": 287, "column": null } },
				"76": { "start": { "line": 287, "column": 38 }, "end": { "line": 287, "column": null } },
				"77": { "start": { "line": 288, "column": 2 }, "end": { "line": 288, "column": null } },
				"78": { "start": { "line": 291, "column": 28 }, "end": { "line": 291, "column": null } },
				"79": { "start": { "line": 489, "column": 39 }, "end": { "line": 489, "column": null } },
				"80": { "start": { "line": 509, "column": 39 }, "end": { "line": 509, "column": null } },
				"81": { "start": { "line": 526, "column": 39 }, "end": { "line": 526, "column": null } },
				"82": { "start": { "line": 554, "column": 39 }, "end": { "line": 554, "column": null } },
				"83": { "start": { "line": 571, "column": 39 }, "end": { "line": 571, "column": null } },
				"84": { "start": { "line": 606, "column": 26 }, "end": { "line": 606, "column": 34 } },
				"85": { "start": { "line": 607, "column": 12 }, "end": { "line": 615, "column": null } }
			},
			"fnMap": {
				"0": {
					"name": "Home",
					"decl": { "start": { "line": 174, "column": 24 }, "end": { "line": 174, "column": null } },
					"loc": { "start": { "line": 174, "column": 24 }, "end": { "line": 906, "column": null } }
				},
				"1": {
					"name": "(anonymous_5)",
					"decl": { "start": { "line": 193, "column": 11 }, "end": { "line": 193, "column": null } },
					"loc": { "start": { "line": 193, "column": 11 }, "end": { "line": 199, "column": 4 } }
				},
				"2": {
					"name": "(anonymous_6)",
					"decl": { "start": { "line": 196, "column": 28 }, "end": { "line": 196, "column": 34 } },
					"loc": { "start": { "line": 196, "column": 34 }, "end": { "line": 196, "column": 66 } }
				},
				"3": {
					"name": "(anonymous_7)",
					"decl": { "start": { "line": 197, "column": 10 }, "end": { "line": 197, "column": 16 } },
					"loc": { "start": { "line": 197, "column": 16 }, "end": { "line": 197, "column": null } }
				},
				"4": {
					"name": "(anonymous_8)",
					"decl": { "start": { "line": 202, "column": 27 }, "end": { "line": 202, "column": 28 } },
					"loc": { "start": { "line": 202, "column": 28 }, "end": { "line": 207, "column": null } }
				},
				"5": {
					"name": "(anonymous_9)",
					"decl": { "start": { "line": 209, "column": 23 }, "end": { "line": 209, "column": null } },
					"loc": { "start": { "line": 209, "column": 23 }, "end": { "line": 255, "column": null } }
				},
				"6": {
					"name": "(anonymous_10)",
					"decl": { "start": { "line": 215, "column": 13 }, "end": { "line": 215, "column": null } },
					"loc": { "start": { "line": 215, "column": 13 }, "end": { "line": 254, "column": 5 } }
				},
				"7": {
					"name": "(anonymous_11)",
					"decl": { "start": { "line": 246, "column": 13 }, "end": { "line": 246, "column": 20 } },
					"loc": { "start": { "line": 246, "column": 20 }, "end": { "line": 246, "column": null } }
				},
				"8": {
					"name": "(anonymous_12)",
					"decl": { "start": { "line": 257, "column": 25 }, "end": { "line": 257, "column": null } },
					"loc": { "start": { "line": 257, "column": 25 }, "end": { "line": 268, "column": null } }
				},
				"9": {
					"name": "(anonymous_13)",
					"decl": { "start": { "line": 261, "column": 14 }, "end": { "line": 261, "column": 20 } },
					"loc": { "start": { "line": 261, "column": 20 }, "end": { "line": 261, "column": 43 } }
				},
				"10": {
					"name": "(anonymous_14)",
					"decl": { "start": { "line": 264, "column": 38 }, "end": { "line": 264, "column": 45 } },
					"loc": { "start": { "line": 264, "column": 45 }, "end": { "line": 264, "column": null } }
				},
				"11": {
					"name": "(anonymous_15)",
					"decl": { "start": { "line": 270, "column": 22 }, "end": { "line": 270, "column": null } },
					"loc": { "start": { "line": 270, "column": 22 }, "end": { "line": 281, "column": null } }
				},
				"12": {
					"name": "(anonymous_16)",
					"decl": { "start": { "line": 280, "column": 41 }, "end": { "line": 280, "column": 48 } },
					"loc": { "start": { "line": 280, "column": 48 }, "end": { "line": 280, "column": null } }
				},
				"13": {
					"name": "(anonymous_17)",
					"decl": { "start": { "line": 284, "column": 31 }, "end": { "line": 284, "column": null } },
					"loc": { "start": { "line": 284, "column": 31 }, "end": { "line": 289, "column": null } }
				},
				"14": {
					"name": "(anonymous_18)",
					"decl": { "start": { "line": 489, "column": 28 }, "end": { "line": 489, "column": 39 } },
					"loc": { "start": { "line": 489, "column": 39 }, "end": { "line": 489, "column": null } }
				},
				"15": {
					"name": "(anonymous_19)",
					"decl": { "start": { "line": 509, "column": 28 }, "end": { "line": 509, "column": 39 } },
					"loc": { "start": { "line": 509, "column": 39 }, "end": { "line": 509, "column": null } }
				},
				"16": {
					"name": "(anonymous_20)",
					"decl": { "start": { "line": 526, "column": 28 }, "end": { "line": 526, "column": 39 } },
					"loc": { "start": { "line": 526, "column": 39 }, "end": { "line": 526, "column": null } }
				},
				"17": {
					"name": "(anonymous_21)",
					"decl": { "start": { "line": 554, "column": 28 }, "end": { "line": 554, "column": 39 } },
					"loc": { "start": { "line": 554, "column": 39 }, "end": { "line": 554, "column": null } }
				},
				"18": {
					"name": "(anonymous_22)",
					"decl": { "start": { "line": 571, "column": 28 }, "end": { "line": 571, "column": 39 } },
					"loc": { "start": { "line": 571, "column": 39 }, "end": { "line": 571, "column": null } }
				},
				"19": {
					"name": "(anonymous_23)",
					"decl": { "start": { "line": 605, "column": 26 }, "end": { "line": 605, "column": null } },
					"loc": { "start": { "line": 605, "column": 26 }, "end": { "line": 616, "column": null } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 194, "column": 2 }, "end": { "line": 198, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 194, "column": 2 }, "end": { "line": 198, "column": null } }]
				},
				"1": {
					"loc": { "start": { "line": 194, "column": 6 }, "end": { "line": 194, "column": 28 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 194, "column": 6 }, "end": { "line": 194, "column": 20 } },
						{ "start": { "line": 194, "column": 20 }, "end": { "line": 194, "column": 28 } }
					]
				},
				"2": {
					"loc": { "start": { "line": 204, "column": 2 }, "end": { "line": 206, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 204, "column": 2 }, "end": { "line": 206, "column": null } }]
				},
				"3": {
					"loc": { "start": { "line": 225, "column": 3 }, "end": { "line": 251, "column": null } },
					"type": "if",
					"locations": [
						{ "start": { "line": 225, "column": 3 }, "end": { "line": 251, "column": null } },
						{ "start": { "line": 247, "column": 10 }, "end": { "line": 251, "column": null } }
					]
				},
				"4": {
					"loc": { "start": { "line": 225, "column": 7 }, "end": { "line": 225, "column": 36 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 225, "column": 7 }, "end": { "line": 225, "column": 21 } },
						{ "start": { "line": 225, "column": 25 }, "end": { "line": 225, "column": 36 } }
					]
				},
				"5": {
					"loc": { "start": { "line": 232, "column": 5 }, "end": { "line": 240, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 233, "column": 8 }, "end": { "line": 233, "column": null } },
						{ "start": { "line": 234, "column": 8 }, "end": { "line": 240, "column": null } }
					]
				},
				"6": {
					"loc": { "start": { "line": 232, "column": 5 }, "end": { "line": 232, "column": 70 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 232, "column": 5 }, "end": { "line": 232, "column": 25 } },
						{ "start": { "line": 232, "column": 29 }, "end": { "line": 232, "column": 51 } },
						{ "start": { "line": 232, "column": 55 }, "end": { "line": 232, "column": 70 } }
					]
				},
				"7": {
					"loc": { "start": { "line": 234, "column": 8 }, "end": { "line": 240, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 235, "column": 9 }, "end": { "line": 235, "column": null } },
						{ "start": { "line": 236, "column": 9 }, "end": { "line": 240, "column": null } }
					]
				},
				"8": {
					"loc": { "start": { "line": 234, "column": 8 }, "end": { "line": 234, "column": 54 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 234, "column": 8 }, "end": { "line": 234, "column": 28 } },
						{ "start": { "line": 234, "column": 32 }, "end": { "line": 234, "column": 54 } }
					]
				},
				"9": {
					"loc": { "start": { "line": 236, "column": 9 }, "end": { "line": 240, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 237, "column": 10 }, "end": { "line": 237, "column": null } },
						{ "start": { "line": 238, "column": 10 }, "end": { "line": 240, "column": null } }
					]
				},
				"10": {
					"loc": { "start": { "line": 238, "column": 10 }, "end": { "line": 240, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 239, "column": 11 }, "end": { "line": 239, "column": null } },
						{ "start": { "line": 240, "column": 11 }, "end": { "line": 240, "column": null } }
					]
				},
				"11": {
					"loc": { "start": { "line": 248, "column": 13 }, "end": { "line": 248, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 248, "column": 13 }, "end": { "line": 248, "column": 25 } },
						{ "start": { "line": 248, "column": 29 }, "end": { "line": 248, "column": null } }
					]
				},
				"12": {
					"loc": { "start": { "line": 285, "column": 2 }, "end": { "line": 285, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 285, "column": 2 }, "end": { "line": 285, "column": null } }]
				},
				"13": {
					"loc": { "start": { "line": 286, "column": 2 }, "end": { "line": 286, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 286, "column": 2 }, "end": { "line": 286, "column": null } }]
				},
				"14": {
					"loc": { "start": { "line": 287, "column": 2 }, "end": { "line": 287, "column": null } },
					"type": "if",
					"locations": [{ "start": { "line": 287, "column": 2 }, "end": { "line": 287, "column": null } }]
				},
				"15": {
					"loc": { "start": { "line": 332, "column": 19 }, "end": { "line": 332, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 332, "column": 33 }, "end": { "line": 332, "column": 57 } },
						{ "start": { "line": 332, "column": 57 }, "end": { "line": 332, "column": null } }
					]
				},
				"16": {
					"loc": { "start": { "line": 335, "column": 8 }, "end": { "line": 340, "column": null } },
					"type": "cond-expr",
					"locations": [{ "start": { "line": 335, "column": 8 }, "end": { "line": 340, "column": null } }]
				},
				"17": {
					"loc": { "start": { "line": 357, "column": 17 }, "end": { "line": 357, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 357, "column": 17 }, "end": { "line": 357, "column": 31 } },
						{ "start": { "line": 357, "column": 31 }, "end": { "line": 357, "column": null } }
					]
				},
				"18": {
					"loc": { "start": { "line": 363, "column": 40 }, "end": { "line": 363, "column": null } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 363, "column": 55 }, "end": { "line": 363, "column": 73 } },
						{ "start": { "line": 363, "column": 73 }, "end": { "line": 363, "column": null } }
					]
				},
				"19": {
					"loc": { "start": { "line": 369, "column": 5 }, "end": { "line": 369, "column": null } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 369, "column": 5 }, "end": { "line": 369, "column": null } }]
				},
				"20": {
					"loc": { "start": { "line": 440, "column": 11 }, "end": { "line": 440, "column": null } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 440, "column": 11 }, "end": { "line": 440, "column": null } }]
				},
				"21": {
					"loc": { "start": { "line": 480, "column": 13 }, "end": { "line": 480, "column": 33 } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 480, "column": 13 }, "end": { "line": 480, "column": 33 } }]
				},
				"22": {
					"loc": { "start": { "line": 500, "column": 13 }, "end": { "line": 500, "column": 35 } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 500, "column": 13 }, "end": { "line": 500, "column": 35 } }]
				},
				"23": {
					"loc": { "start": { "line": 517, "column": 13 }, "end": { "line": 517, "column": 28 } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 517, "column": 13 }, "end": { "line": 517, "column": 28 } }]
				},
				"24": {
					"loc": { "start": { "line": 545, "column": 13 }, "end": { "line": 545, "column": 35 } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 545, "column": 13 }, "end": { "line": 545, "column": 35 } }]
				},
				"25": {
					"loc": { "start": { "line": 562, "column": 13 }, "end": { "line": 562, "column": 33 } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 562, "column": 13 }, "end": { "line": 562, "column": 33 } }]
				},
				"26": {
					"loc": { "start": { "line": 590, "column": 13 }, "end": { "line": 590, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 590, "column": 13 }, "end": { "line": 590, "column": 46 } },
						{ "start": { "line": 590, "column": 46 }, "end": { "line": 590, "column": null } }
					]
				},
				"27": {
					"loc": { "start": { "line": 591, "column": 13 }, "end": { "line": 591, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 591, "column": 13 }, "end": { "line": 591, "column": 45 } },
						{ "start": { "line": 591, "column": 45 }, "end": { "line": 591, "column": null } }
					]
				},
				"28": {
					"loc": { "start": { "line": 592, "column": 13 }, "end": { "line": 592, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 592, "column": 13 }, "end": { "line": 592, "column": 48 } },
						{ "start": { "line": 592, "column": 48 }, "end": { "line": 592, "column": null } }
					]
				},
				"29": {
					"loc": { "start": { "line": 593, "column": 13 }, "end": { "line": 594, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 593, "column": 13 }, "end": { "line": 593, "column": null } },
						{ "start": { "line": 594, "column": 14 }, "end": { "line": 594, "column": null } }
					]
				},
				"30": {
					"loc": { "start": { "line": 625, "column": 11 }, "end": { "line": 625, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 625, "column": 11 }, "end": { "line": 625, "column": 44 } },
						{ "start": { "line": 625, "column": 44 }, "end": { "line": 625, "column": null } }
					]
				},
				"31": {
					"loc": { "start": { "line": 626, "column": 11 }, "end": { "line": 626, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 626, "column": 11 }, "end": { "line": 626, "column": 43 } },
						{ "start": { "line": 626, "column": 43 }, "end": { "line": 626, "column": null } }
					]
				},
				"32": {
					"loc": { "start": { "line": 627, "column": 11 }, "end": { "line": 627, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 627, "column": 11 }, "end": { "line": 627, "column": 46 } },
						{ "start": { "line": 627, "column": 46 }, "end": { "line": 627, "column": null } }
					]
				},
				"33": {
					"loc": { "start": { "line": 628, "column": 11 }, "end": { "line": 629, "column": null } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 628, "column": 11 }, "end": { "line": 628, "column": null } },
						{ "start": { "line": 629, "column": 12 }, "end": { "line": 629, "column": null } }
					]
				},
				"34": {
					"loc": { "start": { "line": 632, "column": 11 }, "end": { "line": 632, "column": null } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 632, "column": 11 }, "end": { "line": 632, "column": null } }]
				},
				"35": {
					"loc": { "start": { "line": 638, "column": 11 }, "end": { "line": 638, "column": 46 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 638, "column": 11 }, "end": { "line": 638, "column": 46 } },
						{ "start": { "line": 638, "column": 46 }, "end": { "line": 638, "column": null } }
					]
				},
				"36": {
					"loc": { "start": { "line": 646, "column": 11 }, "end": { "line": 646, "column": 46 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 646, "column": 11 }, "end": { "line": 646, "column": 46 } },
						{ "start": { "line": 646, "column": 46 }, "end": { "line": 646, "column": null } }
					]
				},
				"37": {
					"loc": { "start": { "line": 654, "column": 11 }, "end": { "line": 654, "column": 46 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 654, "column": 11 }, "end": { "line": 654, "column": 46 } },
						{ "start": { "line": 654, "column": 46 }, "end": { "line": 654, "column": null } }
					]
				},
				"38": {
					"loc": { "start": { "line": 662, "column": 11 }, "end": { "line": 662, "column": 46 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 662, "column": 11 }, "end": { "line": 662, "column": 46 } },
						{ "start": { "line": 662, "column": 46 }, "end": { "line": 662, "column": null } }
					]
				},
				"39": {
					"loc": { "start": { "line": 671, "column": 11 }, "end": { "line": 671, "column": null } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 671, "column": 11 }, "end": { "line": 671, "column": null } }]
				},
				"40": {
					"loc": { "start": { "line": 707, "column": 5 }, "end": { "line": 707, "column": null } },
					"type": "binary-expr",
					"locations": [{ "start": { "line": 707, "column": 5 }, "end": { "line": 707, "column": null } }]
				}
			},
			"s": {
				"0": 0,
				"1": 0,
				"2": 0,
				"3": 0,
				"4": 0,
				"5": 0,
				"6": 0,
				"7": 0,
				"8": 0,
				"9": 0,
				"10": 0,
				"11": 0,
				"12": 0,
				"13": 0,
				"14": 0,
				"15": 0,
				"16": 0,
				"17": 0,
				"18": 0,
				"19": 0,
				"20": 0,
				"21": 0,
				"22": 0,
				"23": 0,
				"24": 0,
				"25": 0,
				"26": 0,
				"27": 0,
				"28": 0,
				"29": 0,
				"30": 0,
				"31": 0,
				"32": 0,
				"33": 0,
				"34": 0,
				"35": 0,
				"36": 0,
				"37": 0,
				"38": 0,
				"39": 0,
				"40": 0,
				"41": 0,
				"42": 0,
				"43": 0,
				"44": 0,
				"45": 0,
				"46": 0,
				"47": 0,
				"48": 0,
				"49": 0,
				"50": 0,
				"51": 0,
				"52": 0,
				"53": 0,
				"54": 0,
				"55": 0,
				"56": 0,
				"57": 0,
				"58": 0,
				"59": 0,
				"60": 0,
				"61": 0,
				"62": 0,
				"63": 0,
				"64": 0,
				"65": 0,
				"66": 0,
				"67": 0,
				"68": 0,
				"69": 0,
				"70": 0,
				"71": 0,
				"72": 0,
				"73": 0,
				"74": 0,
				"75": 0,
				"76": 0,
				"77": 0,
				"78": 0,
				"79": 0,
				"80": 0,
				"81": 0,
				"82": 0,
				"83": 0,
				"84": 0,
				"85": 0
			},
			"f": {
				"0": 0,
				"1": 0,
				"2": 0,
				"3": 0,
				"4": 0,
				"5": 0,
				"6": 0,
				"7": 0,
				"8": 0,
				"9": 0,
				"10": 0,
				"11": 0,
				"12": 0,
				"13": 0,
				"14": 0,
				"15": 0,
				"16": 0,
				"17": 0,
				"18": 0,
				"19": 0
			},
			"b": {
				"0": [0],
				"1": [0, 0],
				"2": [0],
				"3": [0, 0],
				"4": [0, 0],
				"5": [0, 0],
				"6": [0, 0, 0],
				"7": [0, 0],
				"8": [0, 0],
				"9": [0, 0],
				"10": [0, 0],
				"11": [0, 0],
				"12": [0],
				"13": [0],
				"14": [0],
				"15": [0, 0],
				"16": [0],
				"17": [0, 0],
				"18": [0, 0],
				"19": [0],
				"20": [0],
				"21": [0],
				"22": [0],
				"23": [0],
				"24": [0],
				"25": [0],
				"26": [0, 0],
				"27": [0, 0],
				"28": [0, 0],
				"29": [0, 0],
				"30": [0, 0],
				"31": [0, 0],
				"32": [0, 0],
				"33": [0, 0],
				"34": [0],
				"35": [0, 0],
				"36": [0, 0],
				"37": [0, 0],
				"38": [0, 0],
				"39": [0],
				"40": [0]
			}
		}
	}
}
